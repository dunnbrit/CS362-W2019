
>>>Testing Function: shuffle(player,gameState)<<<
Updating Test and Other Players' deck to include cards 1-5... 
Test Player's Current Deck: 1  2  3  4  5  
Test Player's Shuffled Deck: 1  2  4  5  3  

......Running Tests......
Other Player Deck is Not Changed: PASSED 
Number of Cards in Test Player's Deck Correct: PASSED 
Test Player's Deck has Same Cards as Before Shuffle: PASSED 
Test Player's Deck Has Been Shuffled (in new order): PASSED 

>>>Testing of shuffle PASSED <<<

>>>Testing Function: fullDeckCount(player, card, gameState)<<<

......Running Tests......
Intial Deck Count Correct: FAILED - Expected: 10 , Actual: 0 
Decrease in Hand Count Reflected Correctly in Full Deck Count: FAILED - Expected: 9 , Actual: 0 
Decrease in Discard Count Reflected Correctly in Full Deck Count: FAILED - Expected: 8 , Actual: 0 
Decrease in Deck Count Reflected Correctly in Full Deck Count: FAILED - Expected: 7 , Actual: 0 

>>>Testing of fullDeckCount FAILED <<<

>>>Testing Function: whooseTurn(gameState)<<<

......Running Tests......
First Turn is Player One: PASSED 
Player Two Turn Correct: PASSED 
Player One Turn Correct: PASSED 

>>>Testing of whoseTurn PASSED <<<

>>>Testing Function: numHandCards(gameState)<<<

......Running Tests......
Hand Card Count for Player One Correct: PASSED 
Hand Card Count for Player Two Correct: PASSED 

>>>Testing of numHandCards PASSED <<<

>>>Testing Card: Smithy <<<

......Running Tests......
Draw 3 Cards Added to Hand (Test Player's Hand Increased Correctly) : PASSED 
3 Cards Drawn from Player's Deck (Test Player's Deck Decreased Correctly): PASSED 
3 Cards Drawn from Player's Deck (Test Player's Hand Includes Copper or Estate Only): PASSED 
Test Player Discarded Smithy (Discard Count is Increased Correctly): FAILED - Expected Discard Count: 1 , Actual: 0 
Test Player Discarded Smithy (Discard Pile Contains Smithy): FAILED 
Game State Remains Unchanged (Other Player's Hand Count is Unchanged): PASSED 
Game State Remains Unchanged (Other Player's Deck Count is Unchanged): PASSED 
Game State Remains Unchanged (Other Player's Discard Count is Unchanged): PASSED 
Game State Remains Unchanged (Supply Count for Victory Cards is Unchanged): PASSED
Game State Remains Unchanged (Supply Count for Coin Cards is Unchanged): PASSED
Game State Remains Unchanged (Supply Count for All Kingdom Cards is Unchanged): PASSED

>>>Testing of Smithy FAILED <<<

>>>Testing Card: adventurer <<<

......Running Tests......
<<Test Case 1: Deck has 0 Treasure cards>>
Found Treasures Added to Hand (Hand Count Increased Correctly): PASSED 
Found Treasures Added to Hand (Deck Count Decreased Correctly): FAILED - Expected Count: 5  Actual: 0 
Found Treasures Added to Hand  (Deck + Hand Count Unchanged): FAILED - Expected Count: 10  Actual: 5 
Added Cards are Treasure Cards (Current Treasure Count Increased Correctly): PASSED 
Test Player Discarded adventurer (Discard Pile Contains adventurer): FAILED 
Game State Remains Unchanged (Other Player's Hand Count is Unchanged): PASSED 
Game State Remains Unchanged (Other Player's Deck Count is Unchanged): PASSED 
Game State Remains Unchanged (Other Player's Discard Count is Unchanged): PASSED 
Game State Remains Unchanged (Supply Count for Victory Cards is Unchanged): PASSED
Game State Remains Unchanged (Supply Count for Coin Cards is Unchanged): PASSED
Game State Remains Unchanged (Supply Count for All Kingdom Cards is Unchanged): PASSED

<<Test Case 2: Deck has 1 Treasure card>>
Found Treasures Added to Hand (Hand Count Increased Correctly): PASSED 
Found Treasures Added to Hand (Deck Count Decreased Correctly): FAILED - Expected Count: 4  Actual: 0 
Found Treasures Added to Hand  (Deck + Hand Count Unchanged): FAILED - Expected Count: 10  Actual: 6 
Added Cards are Treasure Cards (Current Treasure Count Increased Correctly): PASSED 
Test Player Discarded adventurer (Discard Pile Contains adventurer): FAILED 
Game State Remains Unchanged (Other Player's Hand Count is Unchanged): PASSED 
Game State Remains Unchanged (Other Player's Deck Count is Unchanged): PASSED 
Game State Remains Unchanged (Other Player's Discard Count is Unchanged): PASSED 
Game State Remains Unchanged (Supply Count for Victory Cards is Unchanged): PASSED
Game State Remains Unchanged (Supply Count for Coin Cards is Unchanged): PASSED
Game State Remains Unchanged (Supply Count for All Kingdom Cards is Unchanged): PASSED

<<Test Case 3: Deck has 2 Treasure cards>>
Found Treasures Added to Hand (Hand Count Increased Correctly): PASSED 
Found Treasures Added to Hand (Deck Count Decreased Correctly): FAILED - Expected Count: 3  Actual: 0 
Found Treasures Added to Hand  (Deck + Hand Count Unchanged): FAILED - Expected Count: 10  Actual: 7 
Added Cards are Treasure Cards (Current Treasure Count Increased Correctly): PASSED 
Test Player Discarded adventurer (Discard Pile Contains adventurer): FAILED 
Game State Remains Unchanged (Other Player's Hand Count is Unchanged): PASSED 
Game State Remains Unchanged (Other Player's Deck Count is Unchanged): PASSED 
Game State Remains Unchanged (Other Player's Discard Count is Unchanged): PASSED 
Game State Remains Unchanged (Supply Count for Victory Cards is Unchanged): PASSED
Game State Remains Unchanged (Supply Count for Coin Cards is Unchanged): PASSED
Game State Remains Unchanged (Supply Count for All Kingdom Cards is Unchanged): PASSED

<<Test Case 4: Deck has 3 Treasure cards>>
Found Treasures Added to Hand (Hand Count Increased Correctly): PASSED 
Found Treasures Added to Hand (Deck Count Decreased Correctly): FAILED - Expected Count: 2  Actual: 0 
Found Treasures Added to Hand  (Deck + Hand Count Unchanged): FAILED - Expected Count: 10  Actual: 8 
Added Cards are Treasure Cards (Current Treasure Count Increased Correctly): PASSED 
Test Player Discarded adventurer (Discard Pile Contains adventurer): FAILED 
Game State Remains Unchanged (Other Player's Hand Count is Unchanged): PASSED 
Game State Remains Unchanged (Other Player's Deck Count is Unchanged): PASSED 
Game State Remains Unchanged (Other Player's Discard Count is Unchanged): PASSED 
Game State Remains Unchanged (Supply Count for Victory Cards is Unchanged): PASSED
Game State Remains Unchanged (Supply Count for Coin Cards is Unchanged): PASSED
Game State Remains Unchanged (Supply Count for All Kingdom Cards is Unchanged): PASSED

<<Test Case 4: Deck has 5 Treasure cards>>
Found Treasures Added to Hand (Hand Count Increased Correctly): FAILED - Expected Count: 10  Actual: 8 
Found Treasures Added to Hand (Deck Count Decreased Correctly): FAILED - Expected Count: 0  Actual: 2 
Found Treasures Added to Hand  (Deck + Hand Count Unchanged): PASSED 
Added Cards are Treasure Cards (Current Treasure Count Increased Correctly): FAILED - Expected Count: 9  Actual: 7 
Test Player Discarded adventurer (Discard Pile Contains adventurer): FAILED 
Game State Remains Unchanged (Other Player's Hand Count is Unchanged): PASSED 
Game State Remains Unchanged (Other Player's Deck Count is Unchanged): PASSED 
Game State Remains Unchanged (Other Player's Discard Count is Unchanged): PASSED 
Game State Remains Unchanged (Supply Count for Victory Cards is Unchanged): PASSED
Game State Remains Unchanged (Supply Count for Coin Cards is Unchanged): PASSED
Game State Remains Unchanged (Supply Count for All Kingdom Cards is Unchanged): PASSED

>>>Testing of adventurer FAILED <<<

>>>Testing Card: village <<<

......Running Tests......
Draw 1 Card Added to Hand (Test Player's Hand Increased Correctly) : FAILED - Expected Hand Count: 6 , Actual: 5 
Draw 1 Card Added to Hand (Test Player's Deck Decreased Correctly) : PASSED 
Add 2 Actions (Test Player's Number of Actions Increased Correctly) : PASSED 
Test Player Discarded village (Discard Count is Increased Correctly): FAILED - Expected Discard Count: 1 , Actual: 0 
Test Player Discarded village (Discard Pile Contains village): FAILED 
Game State Remains Unchanged (Other Player's Hand Count is Unchanged): PASSED 
Game State Remains Unchanged (Other Player's Deck Count is Unchanged): PASSED 
Game State Remains Unchanged (Other Player's Discard Count is Unchanged): PASSED 
Game State Remains Unchanged (Supply Count for Victory Cards is Unchanged): PASSED
Game State Remains Unchanged (Supply Count for Coin Cards is Unchanged): PASSED
Game State Remains Unchanged (Supply Count for All Kingdom Cards is Unchanged): PASSED

>>>Testing of village FAILED <<<

>>>Testing Card: great_hall <<<

......Running Tests......
Draw 1 Card Added to Hand (Test Player's Hand Increased Correctly) : FAILED - Expected Hand Count: 6 , Actual: 5 
Draw 1 Card Added to Hand (Test Player's Deck Decreased Correctly) : PASSED 
Add 1 Action (Test Player's Number of Actions Increased Correctly) : PASSED 
Test Player Discarded great_hall (Discard Count is Increased Correctly): FAILED - Expected Discard Count: 1 , Actual: 0 
Test Player Discarded great_hall (Discard Pile Contains great_hall): FAILED 
Game State Remains Unchanged (Other Player's Hand Count is Unchanged): PASSED 
Game State Remains Unchanged (Other Player's Deck Count is Unchanged): PASSED 
Game State Remains Unchanged (Other Player's Discard Count is Unchanged): PASSED 
Game State Remains Unchanged (Supply Count for Victory Cards is Unchanged): PASSED
Game State Remains Unchanged (Supply Count for Coin Cards is Unchanged): PASSED
Game State Remains Unchanged (Supply Count for All Kingdom Cards is Unchanged): PASSED

>>>Testing of great_hall FAILED <<<
File 'unittest1.c'
Lines executed:82.81% of 64
Branches executed:100.00% of 38
Taken at least once:76.32% of 38
Calls executed:76.00% of 25
Creating 'unittest1.c.gcov'

File 'unittest2.c'
Lines executed:87.50% of 40
Branches executed:100.00% of 10
Taken at least once:50.00% of 10
Calls executed:76.19% of 21
Creating 'unittest2.c.gcov'

File 'unittest3.c'
Lines executed:79.41% of 34
Branches executed:100.00% of 8
Taken at least once:50.00% of 8
Calls executed:76.47% of 17
Creating 'unittest3.c.gcov'

File 'unittest4.c'
Lines executed:80.00% of 25
Branches executed:100.00% of 6
Taken at least once:50.00% of 6
Calls executed:76.92% of 13
Creating 'unittest4.c.gcov'

File 'cardtest1.c'
Lines executed:68.32% of 101
Branches executed:96.00% of 50
Taken at least once:54.00% of 50
Calls executed:57.75% of 71
Creating 'cardtest1.c.gcov'

File 'cardtest2.c'
Lines executed:86.13% of 173
Branches executed:100.00% of 126
Taken at least once:77.78% of 126
Calls executed:66.25% of 80
Creating 'cardtest2.c.gcov'

File 'cardtest3.c'
Lines executed:69.39% of 98
Branches executed:95.45% of 44
Taken at least once:50.00% of 44
Calls executed:57.75% of 71
Creating 'cardtest3.c.gcov'

File 'cardtest4.c'
Lines executed:69.39% of 98
Branches executed:95.45% of 44
Taken at least once:50.00% of 44
Calls executed:57.75% of 71
Creating 'cardtest4.c.gcov'

Function 'updateCoins'
Lines executed:81.82% of 11

Function 'gainCard'
Lines executed:0.00% of 13

Function 'discardCard'
Lines executed:84.62% of 13

Function 'stewardCard.3302'
Lines executed:0.00% of 10

Function 'council_roomCard.3297'
Lines executed:0.00% of 10

Function 'salvagerCard.3295'
Lines executed:0.00% of 6

Function 'smithyCard.3293'
Lines executed:100.00% of 5

Function 'cardEffect'
Lines executed:9.76% of 205

Function 'adventurerCard.3284'
Lines executed:100.00% of 19

Function 'getCost'
Lines executed:0.00% of 30

Function 'drawCard'
Lines executed:77.27% of 22

Function 'getWinners'
Lines executed:0.00% of 24

Function 'scoreFor'
Lines executed:0.00% of 24

Function 'isGameOver'
Lines executed:0.00% of 10

Function 'endTurn'
Lines executed:0.00% of 20

Function 'whoseTurn'
Lines executed:100.00% of 2

Function 'fullDeckCount'
Lines executed:88.89% of 9

Function 'supplyCount'
Lines executed:100.00% of 2

Function 'handCard'
Lines executed:0.00% of 3

Function 'numHandCards'
Lines executed:100.00% of 2

Function 'buyCard'
Lines executed:0.00% of 13

Function 'playCard'
Lines executed:0.00% of 14

Function 'shuffle'
Lines executed:100.00% of 16

Function 'initializeGame'
Lines executed:83.87% of 62

Function 'kingdomCards'
Lines executed:0.00% of 13

Function 'newGame'
Lines executed:0.00% of 3

Function 'compare'
Lines executed:83.33% of 6

File 'dominion.c'
Lines executed:29.63% of 567
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      365:    8:int compare(const void* a, const void* b) {
      365:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
      365:   11:  if (*(int*)a < *(int*)b)
      101:   12:    return -1;
      264:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
       12:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       12:   44:  SelectStream(1);
       12:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
       12:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       12:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      132:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
     1320:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
     1200:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       12:   73:  if (numPlayers == 2)
        -:   74:    {
       12:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       12:   87:  if (numPlayers == 2)
        -:   88:    {
       12:   89:      state->supplyCount[estate] = 8;
       12:   90:      state->supplyCount[duchy] = 8;
       12:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       12:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       12:  102:  state->supplyCount[silver] = 40;
       12:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      252:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
     1980:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
     1860:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      120:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
       48:  115:		  if (numPlayers == 2){ 
       24:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       96:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      120:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     1740:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       36:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
       24:  140:      state->deckCount[i] = 0;
       96:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
       72:  143:	  state->deck[i][j] = estate;
       72:  144:	  state->deckCount[i]++;
        -:  145:	}
      192:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
      168:  148:	  state->deck[i][j] = copper;
      168:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       36:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
       24:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       36:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       24:  166:      state->handCount[i] = 0;
       24:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      336:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
      324:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       12:  182:  state->outpostPlayed = 0;
       12:  183:  state->phase = 0;
       12:  184:  state->numActions = 1;
       12:  185:  state->numBuys = 1;
       12:  186:  state->playedCardCount = 0;
       12:  187:  state->whoseTurn = 0;
       12:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       72:  192:  for (it = 0; it < 5; it++){
       60:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
       12:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
       12:  198:  return 0;
        -:  199:}
        -:  200:
       31:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       31:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       31:  209:  if (state->deckCount[player] < 1)
        6:  210:    return -1;
       25:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      295:  214:  while (state->deckCount[player] > 0) {
      245:  215:    card = floor(Random() * state->deckCount[player]);
      245:  216:    newDeck[newDeckPos] = state->deck[player][card];
      245:  217:    newDeckPos++;
      853:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
      608:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      245:  221:    state->deckCount[player]--;
        -:  222:  }
      270:  223:  for (i = 0; i < newDeckPos; i++) {
      245:  224:    state->deck[player][i] = newDeck[i];
      245:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       25:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
        2:  311:int numHandCards(struct gameState *state) {
        2:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
      256:  320:int supplyCount(int card, struct gameState *state) {
      256:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
        4:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
        4:  326:  int count = 0;
        -:  327:
       23:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
       19:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
       21:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
       17:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
        4:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
        4:  343:  return count;
        -:  344:}
        -:  345:
       13:  346:int whoseTurn(struct gameState *state) {
       13:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
       91:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       91:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
        3:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
        3:  538:    state->deckCount[player] = state->discardCount[player];
        3:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
        3:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
        3:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
        3:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
        3:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
        3:  559:    if (deckCounter == 0)
        3:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       88:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       88:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       88:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       88:  576:    state->deckCount[player]--;
       88:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       88:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        8:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
        8:  653:  int currentPlayer = whoseTurn(state);
        8:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
        8:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
        8:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
        8:  660:  int z = 0;// this is the counter for the temp hand
        8:  661:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:
        -:  665:
        -:  666:  //Refactor of 5 cards: adventurer, smithy, steward,salvager, council room into functions outside of the switch statement
        -:  667:
        -:  668:  //Adventurer Card
        5:  669:  void adventurerCard(){
        -:  670:
        5:  671:    int shuffleCount = 0;
        -:  672:
       36:  673:    while(drawntreasure<=2){
       28:  674:      if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  675:        //If deck has already been shuffled once then player stops drawing cards
        5:  676:        if(shuffleCount > 0){
        2:  677:          break;
        -:  678:        }
        3:  679:        shuffle(currentPlayer, state);
        3:  680:        shuffleCount++;      
        -:  681:      }
        -:  682:  
       26:  683:      drawCard(currentPlayer, state);
       26:  684:      cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  685:      
       26:  686:      if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
       12:  687:        drawntreasure++;
        -:  688:      else{
       14:  689:        temphand[z]=cardDrawn;
       14:  690:        state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
       14:  691:        z++;
        -:  692:        }
        -:  693:
        -:  694:    }
        -:  695:      
       24:  696:    while(z-1>=0){
       14:  697:      state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
       14:  698:      z=z-1;
        -:  699:    }
        -:  700:
        5:  701:  } 
        -:  702:
        -:  703:  //Smithy Card
        1:  704:  void smithyCard(){
        -:  705:    //+3 Cards
        1:  706:    drawCard(currentPlayer, state);
        1:  707:    drawCard(currentPlayer, state);
        1:  708:    drawCard(currentPlayer, state);
        -:  709:
        -:  710: 
        1:  711:  }
        -:  712:
        -:  713:  //Salvager Card
    #####:  714:  void salvagerCard(){
        -:  715:    //+1 buy
    #####:  716:    state->numBuys++;
        -:  717:      
        -:  718:    //gain coins equal to trashed card
    #####:  719:    state->coins = state->coins + getCost( handCard(choice1, state) );
        -:  720:    //trash card
    #####:  721:    discardCard(choice1, currentPlayer, state, 1);  
        -:  722:
        -:  723:    //discard card
    #####:  724:    discardCard(handPos, currentPlayer, state, 0);
    #####:  725:  }
        -:  726:  
        -:  727:  //Council Room Card
    #####:  728:  void council_roomCard(){
        -:  729:    //+4 Cards
    #####:  730:    drawCard(currentPlayer, state);
    #####:  731:    drawCard(currentPlayer, state);
    #####:  732:    drawCard(currentPlayer, state);
    #####:  733:    drawCard(currentPlayer, state);
        -:  734:      
        -:  735:    //+1 Buy
    #####:  736:    state->numBuys++;
        -:  737:      
        -:  738:    //Each other player draws a card
    #####:  739:    for (i = 0; i < state->numPlayers; i++)
        -:  740:    {
        -:  741:
        -:  742:
    #####:  743:        drawCard(i, state);
        -:  744:
        -:  745:    }
        -:  746:      
        -:  747:    //put played card in played card pile
    #####:  748:    discardCard(handPos, currentPlayer, state, 0);
    #####:  749:  }
        -:  750:	
        -:  751:  //Steward Card
    #####:  752:  void stewardCard(){
    #####:  753:    if (choice1 == 1)
        -:  754:    {
        -:  755:      //+2 cards
    #####:  756:      for(i = 0; i < 2; i++){
    #####:  757:        drawCard(currentPlayer, state); 
        -:  758:      } 
        -:  759:    }
    #####:  760:    else if (choice1 == 2)
        -:  761:    {
        -:  762:      //+2 coins
    #####:  763:      state->coins = state->coins + 2;
        -:  764:    }
        -:  765:    else
        -:  766:    {
        -:  767:      //trash 2 cards in hand
    #####:  768:      discardCard(choice2, currentPlayer, state, 1);
    #####:  769:      discardCard(choice2, currentPlayer, state, 1);
        -:  770:    }
        -:  771:      
        -:  772:    //discard card from hand
    #####:  773:    discardCard(handPos, currentPlayer, state, 0);
    #####:  774:  }
        -:  775:
        -:  776:
        -:  777:
        -:  778:  //uses switch to select card and perform actions
        8:  779:  switch( card ) 
        -:  780:    {
        -:  781:    case adventurer:
        5:  782:      adventurerCard();
        5:  783:      return 0;
        -:  784:			
        -:  785:    case council_room:
    #####:  786:      council_roomCard();
    #####:  787:      return 0;
        -:  788:			
        -:  789:    case feast:
        -:  790:      //gain card with cost up to 5
        -:  791:      //Backup hand
    #####:  792:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  793:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  794:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  795:      }
        -:  796:      //Backup hand
        -:  797:
        -:  798:      //Update Coins for Buy
    #####:  799:      updateCoins(currentPlayer, state, 5);
    #####:  800:      x = 1;//Condition to loop on
    #####:  801:      while( x == 1) {//Buy one card
    #####:  802:	if (supplyCount(choice1, state) <= 0){
        -:  803:	  if (DEBUG)
        -:  804:	    printf("None of that card left, sorry!\n");
        -:  805:
        -:  806:	  if (DEBUG){
        -:  807:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  808:	  }
        -:  809:	}
    #####:  810:	else if (state->coins < getCost(choice1)){
    #####:  811:	  printf("That card is too expensive!\n");
        -:  812:
        -:  813:	  if (DEBUG){
        -:  814:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  815:	  }
        -:  816:	}
        -:  817:	else{
        -:  818:
        -:  819:	  if (DEBUG){
        -:  820:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  821:	  }
        -:  822:
    #####:  823:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  824:	  x = 0;//No more buying cards
        -:  825:
        -:  826:	  if (DEBUG){
        -:  827:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  828:	  }
        -:  829:
        -:  830:	}
        -:  831:      }     
        -:  832:
        -:  833:      //Reset Hand
    #####:  834:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  835:	state->hand[currentPlayer][i] = temphand[i];
    #####:  836:	temphand[i] = -1;
        -:  837:      }
        -:  838:      //Reset Hand
        -:  839:      			
    #####:  840:      return 0;
        -:  841:			
        -:  842:    case gardens:
    #####:  843:      return -1;
        -:  844:			
        -:  845:    case mine:
    #####:  846:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  847:
    #####:  848:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  849:	{
    #####:  850:	  return -1;
        -:  851:	}
        -:  852:		
    #####:  853:      if (choice2 > treasure_map || choice2 < curse)
        -:  854:	{
    #####:  855:	  return -1;
        -:  856:	}
        -:  857:
    #####:  858:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  859:	{
    #####:  860:	  return -1;
        -:  861:	}
        -:  862:
    #####:  863:      gainCard(choice2, state, 2, currentPlayer);
        -:  864:
        -:  865:      //discard card from hand
    #####:  866:      discardCard(handPos, currentPlayer, state, 0);
        -:  867:
        -:  868:      //discard trashed card
    #####:  869:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  870:	{
    #####:  871:	  if (state->hand[currentPlayer][i] == j)
        -:  872:	    {
    #####:  873:	      discardCard(i, currentPlayer, state, 0);			
    #####:  874:	      break;
        -:  875:	    }
        -:  876:	}
        -:  877:			
    #####:  878:      return 0;
        -:  879:			
        -:  880:    case remodel:
    #####:  881:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  882:
    #####:  883:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  884:	{
    #####:  885:	  return -1;
        -:  886:	}
        -:  887:
    #####:  888:      gainCard(choice2, state, 0, currentPlayer);
        -:  889:
        -:  890:      //discard card from hand
    #####:  891:      discardCard(handPos, currentPlayer, state, 0);
        -:  892:
        -:  893:      //discard trashed card
    #####:  894:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  895:	{
    #####:  896:	  if (state->hand[currentPlayer][i] == j)
        -:  897:	    {
    #####:  898:	      discardCard(i, currentPlayer, state, 0);			
    #####:  899:	      break;
        -:  900:	    }
        -:  901:	}
        -:  902:
        -:  903:
    #####:  904:      return 0;
        -:  905:		
        -:  906:    case smithy:
        1:  907:      smithyCard();
        1:  908:      return 0;
        -:  909:		
        -:  910:    case village:
        -:  911:      //+1 Card
        1:  912:      drawCard(currentPlayer, state);
        -:  913:			
        -:  914:      //+2 Actions
        1:  915:      state->numActions = state->numActions + 2;
        -:  916:			
        -:  917:      //discard played card from hand
        1:  918:      discardCard(handPos, currentPlayer, state, 0);
        1:  919:      return 0;
        -:  920:		
        -:  921:    case baron:
    #####:  922:      state->numBuys++;//Increase buys by 1!
    #####:  923:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  924:	int p = 0;//Iterator for hand!
    #####:  925:	int card_not_discarded = 1;//Flag for discard set!
    #####:  926:	while(card_not_discarded){
    #####:  927:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  928:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  929:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  930:	    state->discardCount[currentPlayer]++;
    #####:  931:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  932:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  933:	    }
    #####:  934:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  935:	    state->handCount[currentPlayer]--;
    #####:  936:	    card_not_discarded = 0;//Exit the loop
        -:  937:	  }
    #####:  938:	  else if (p > state->handCount[currentPlayer]){
        -:  939:	    if(DEBUG) {
        -:  940:	      printf("No estate cards in your hand, invalid choice\n");
        -:  941:	      printf("Must gain an estate if there are any\n");
        -:  942:	    }
    #####:  943:	    if (supplyCount(estate, state) > 0){
    #####:  944:	      gainCard(estate, state, 0, currentPlayer);
    #####:  945:	      state->supplyCount[estate]--;//Decrement estates
    #####:  946:	      if (supplyCount(estate, state) == 0){
    #####:  947:		isGameOver(state);
        -:  948:	      }
        -:  949:	    }
    #####:  950:	    card_not_discarded = 0;//Exit the loop
        -:  951:	  }
        -:  952:			    
        -:  953:	  else{
    #####:  954:	    p++;//Next card
        -:  955:	  }
        -:  956:	}
        -:  957:      }
        -:  958:			    
        -:  959:      else{
    #####:  960:	if (supplyCount(estate, state) > 0){
    #####:  961:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  962:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  963:	  if (supplyCount(estate, state) == 0){
    #####:  964:	    isGameOver(state);
        -:  965:	  }
        -:  966:	}
        -:  967:      }
        -:  968:	    
        -:  969:      
    #####:  970:      return 0;
        -:  971:		
        -:  972:    case great_hall:
        -:  973:      //+1 Card
        1:  974:      drawCard(currentPlayer, state);
        -:  975:			
        -:  976:      //+1 Actions
        1:  977:      state->numActions++;
        -:  978:			
        -:  979:      //discard card from hand
        1:  980:      discardCard(handPos, currentPlayer, state, 0);
        1:  981:      return 0;
        -:  982:		
        -:  983:    case minion:
        -:  984:      //+1 action
    #####:  985:      state->numActions++;
        -:  986:			
        -:  987:      //discard card from hand
    #####:  988:      discardCard(handPos, currentPlayer, state, 0);
        -:  989:			
    #####:  990:      if (choice1)		//+2 coins
        -:  991:	{
    #####:  992:	  state->coins = state->coins + 2;
        -:  993:	}
        -:  994:			
    #####:  995:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  996:	{
        -:  997:	  //discard hand
    #####:  998:	  while(numHandCards(state) > 0)
        -:  999:	    {
    #####: 1000:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1001:	    }
        -: 1002:				
        -: 1003:	  //draw 4
    #####: 1004:	  for (i = 0; i < 4; i++)
        -: 1005:	    {
    #####: 1006:	      drawCard(currentPlayer, state);
        -: 1007:	    }
        -: 1008:				
        -: 1009:	  //other players discard hand and redraw if hand size > 4
    #####: 1010:	  for (i = 0; i < state->numPlayers; i++)
        -: 1011:	    {
    #####: 1012:	      if (i != currentPlayer)
        -: 1013:		{
    #####: 1014:		  if ( state->handCount[i] > 4 )
        -: 1015:		    {
        -: 1016:		      //discard hand
    #####: 1017:		      while( state->handCount[i] > 0 )
        -: 1018:			{
    #####: 1019:			  discardCard(handPos, i, state, 0);
        -: 1020:			}
        -: 1021:							
        -: 1022:		      //draw 4
    #####: 1023:		      for (j = 0; j < 4; j++)
        -: 1024:			{
    #####: 1025:			  drawCard(i, state);
        -: 1026:			}
        -: 1027:		    }
        -: 1028:		}
        -: 1029:	    }
        -: 1030:				
        -: 1031:	}
    #####: 1032:      return 0;
        -: 1033:		
        -: 1034:    case steward:
    #####: 1035:      stewardCard();
    #####: 1036:      return 0;
        -: 1037:		
        -: 1038:    case tribute:
    #####: 1039:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1040:	if (state->deckCount[nextPlayer] > 0){
    #####: 1041:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1042:	  state->deckCount[nextPlayer]--;
        -: 1043:	}
    #####: 1044:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1045:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1046:	  state->discardCount[nextPlayer]--;
        -: 1047:	}
        -: 1048:	else{
        -: 1049:	  //No Card to Reveal
        -: 1050:	  if (DEBUG){
        -: 1051:	    printf("No cards to reveal\n");
        -: 1052:	  }
        -: 1053:	}
        -: 1054:      }
        -: 1055:	    
        -: 1056:      else{
    #####: 1057:	if (state->deckCount[nextPlayer] == 0){
    #####: 1058:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1059:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1060:	    state->deckCount[nextPlayer]++;
    #####: 1061:	    state->discard[nextPlayer][i] = -1;
    #####: 1062:	    state->discardCount[nextPlayer]--;
        -: 1063:	  }
        -: 1064:			    
    #####: 1065:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1066:	} 
    #####: 1067:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1068:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1069:	state->deckCount[nextPlayer]--;
    #####: 1070:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1071:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1072:	state->deckCount[nextPlayer]--;
        -: 1073:      }    
        -: 1074:		       
    #####: 1075:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1076:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1077:	state->playedCardCount++;
    #####: 1078:	tributeRevealedCards[1] = -1;
        -: 1079:      }
        -: 1080:
    #####: 1081:      for (i = 0; i <= 2; i ++){
    #####: 1082:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1083:	  state->coins += 2;
        -: 1084:	}
        -: 1085:		    
    #####: 1086:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1087:	  drawCard(currentPlayer, state);
    #####: 1088:	  drawCard(currentPlayer, state);
        -: 1089:	}
        -: 1090:	else{//Action Card
    #####: 1091:	  state->numActions = state->numActions + 2;
        -: 1092:	}
        -: 1093:      }
        -: 1094:	    
    #####: 1095:      return 0;
        -: 1096:		
        -: 1097:    case ambassador:
    #####: 1098:      j = 0;		//used to check if player has enough cards to discard
        -: 1099:
    #####: 1100:      if (choice2 > 2 || choice2 < 0)
        -: 1101:	{
    #####: 1102:	  return -1;				
        -: 1103:	}
        -: 1104:
    #####: 1105:      if (choice1 == handPos)
        -: 1106:	{
    #####: 1107:	  return -1;
        -: 1108:	}
        -: 1109:
    #####: 1110:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1111:	{
    #####: 1112:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1113:	    {
    #####: 1114:	      j++;
        -: 1115:	    }
        -: 1116:	}
    #####: 1117:      if (j < choice2)
        -: 1118:	{
    #####: 1119:	  return -1;				
        -: 1120:	}
        -: 1121:
        -: 1122:      if (DEBUG) 
        -: 1123:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1124:
        -: 1125:      //increase supply count for choosen card by amount being discarded
    #####: 1126:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1127:			
        -: 1128:      //each other player gains a copy of revealed card
    #####: 1129:      for (i = 0; i < state->numPlayers; i++)
        -: 1130:	{
    #####: 1131:	  if (i != currentPlayer)
        -: 1132:	    {
    #####: 1133:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1134:	    }
        -: 1135:	}
        -: 1136:
        -: 1137:      //discard played card from hand
    #####: 1138:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1139:
        -: 1140:      //trash copies of cards returned to supply
    #####: 1141:      for (j = 0; j < choice2; j++)
        -: 1142:	{
    #####: 1143:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1144:	    {
    #####: 1145:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1146:		{
    #####: 1147:		  discardCard(i, currentPlayer, state, 1);
    #####: 1148:		  break;
        -: 1149:		}
        -: 1150:	    }
        -: 1151:	}			
        -: 1152:
    #####: 1153:      return 0;
        -: 1154:		
        -: 1155:    case cutpurse:
        -: 1156:
    #####: 1157:      updateCoins(currentPlayer, state, 2);
    #####: 1158:      for (i = 0; i < state->numPlayers; i++)
        -: 1159:	{
    #####: 1160:	  if (i != currentPlayer)
        -: 1161:	    {
    #####: 1162:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1163:		{
    #####: 1164:		  if (state->hand[i][j] == copper)
        -: 1165:		    {
    #####: 1166:		      discardCard(j, i, state, 0);
    #####: 1167:		      break;
        -: 1168:		    }
    #####: 1169:		  if (j == state->handCount[i])
        -: 1170:		    {
    #####: 1171:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1172:			{
        -: 1173:			  if (DEBUG)
        -: 1174:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1175:			}	
    #####: 1176:		      break;
        -: 1177:		    }		
        -: 1178:		}
        -: 1179:					
        -: 1180:	    }
        -: 1181:				
        -: 1182:	}				
        -: 1183:
        -: 1184:      //discard played card from hand
    #####: 1185:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1186:
    #####: 1187:      return 0;
        -: 1188:
        -: 1189:		
        -: 1190:    case embargo: 
        -: 1191:      //+2 Coins
    #####: 1192:      state->coins = state->coins + 2;
        -: 1193:			
        -: 1194:      //see if selected pile is in play
    #####: 1195:      if ( state->supplyCount[choice1] == -1 )
        -: 1196:	{
    #####: 1197:	  return -1;
        -: 1198:	}
        -: 1199:			
        -: 1200:      //add embargo token to selected supply pile
    #####: 1201:      state->embargoTokens[choice1]++;
        -: 1202:			
        -: 1203:      //trash card
    #####: 1204:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1205:      return 0;
        -: 1206:		
        -: 1207:    case outpost:
        -: 1208:      //set outpost flag
    #####: 1209:      state->outpostPlayed++;
        -: 1210:			
        -: 1211:      //discard card
    #####: 1212:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1213:      return 0;
        -: 1214:		
        -: 1215:    case salvager:
    #####: 1216:      salvagerCard();
    #####: 1217:      return 0;
        -: 1218:		
        -: 1219:    case sea_hag:
    #####: 1220:      for (i = 0; i < state->numPlayers; i++){
    #####: 1221:	if (i != currentPlayer){
    #####: 1222:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1223:	  state->discardCount[i]++;
    #####: 1224:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1225:	}
        -: 1226:      }
    #####: 1227:      return 0;
        -: 1228:		
        -: 1229:    case treasure_map:
        -: 1230:      //search hand for another treasure_map
    #####: 1231:      index = -1;
    #####: 1232:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1233:	{
    #####: 1234:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1235:	    {
    #####: 1236:	      index = i;
    #####: 1237:	      break;
        -: 1238:	    }
        -: 1239:	}
    #####: 1240:      if (index > -1)
        -: 1241:	{
        -: 1242:	  //trash both treasure cards
    #####: 1243:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1244:	  discardCard(index, currentPlayer, state, 1);
        -: 1245:
        -: 1246:	  //gain 4 Gold cards
    #####: 1247:	  for (i = 0; i < 4; i++)
        -: 1248:	    {
    #####: 1249:	      gainCard(gold, state, 1, currentPlayer);
        -: 1250:	    }
        -: 1251:				
        -: 1252:	  //return success
    #####: 1253:	  return 1;
        -: 1254:	}
        -: 1255:			
        -: 1256:      //no second treasure_map found in hand
    #####: 1257:      return -1;
        -: 1258:    }
        -: 1259:	
    #####: 1260:  return -1;
        -: 1261:}
        -: 1262:
        2: 1263:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1264:{
        -: 1265:	
        -: 1266:  //if card is not trashed, added to Played pile 
        2: 1267:  if (trashFlag < 1)
        -: 1268:    {
        -: 1269:      //add card to played pile
        2: 1270:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        2: 1271:      state->playedCardCount++;
        -: 1272:    }
        -: 1273:	
        -: 1274:  //set played card to -1
        2: 1275:  state->hand[currentPlayer][handPos] = -1;
        -: 1276:	
        -: 1277:  //remove card from player's hand
        2: 1278:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1279:    {
        -: 1280:      //reduce number of cards in hand
    #####: 1281:      state->handCount[currentPlayer]--;
        -: 1282:    }
        2: 1283:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1284:    {
        -: 1285:      //reduce number of cards in hand
    #####: 1286:      state->handCount[currentPlayer]--;
        -: 1287:    }
        -: 1288:  else 	
        -: 1289:    {
        -: 1290:      //replace discarded card with last card in hand
        2: 1291:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1292:      //set last card to -1
        2: 1293:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1294:      //reduce number of cards in hand
        2: 1295:      state->handCount[currentPlayer]--;
        -: 1296:    }
        -: 1297:	
        2: 1298:  return 0;
        -: 1299:}
        -: 1300:
    #####: 1301:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1302:{
        -: 1303:  //Note: supplyPos is enum of choosen card
        -: 1304:	
        -: 1305:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1306:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1307:    {
    #####: 1308:      return -1;
        -: 1309:    }
        -: 1310:	
        -: 1311:  //added card for [whoseTurn] current player:
        -: 1312:  // toFlag = 0 : add to discard
        -: 1313:  // toFlag = 1 : add to deck
        -: 1314:  // toFlag = 2 : add to hand
        -: 1315:
    #####: 1316:  if (toFlag == 1)
        -: 1317:    {
    #####: 1318:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1319:      state->deckCount[player]++;
        -: 1320:    }
    #####: 1321:  else if (toFlag == 2)
        -: 1322:    {
    #####: 1323:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1324:      state->handCount[player]++;
        -: 1325:    }
        -: 1326:  else
        -: 1327:    {
    #####: 1328:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1329:      state->discardCount[player]++;
        -: 1330:    }
        -: 1331:	
        -: 1332:  //decrease number in supply pile
    #####: 1333:  state->supplyCount[supplyPos]--;
        -: 1334:	 
    #####: 1335:  return 0;
        -: 1336:}
        -: 1337:
       12: 1338:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1339:{
        -: 1340:  int i;
        -: 1341:	
        -: 1342:  //reset coin count
       12: 1343:  state->coins = 0;
        -: 1344:
        -: 1345:  //add coins for each Treasure card in player's hand
       72: 1346:  for (i = 0; i < state->handCount[player]; i++)
        -: 1347:    {
       60: 1348:      if (state->hand[player][i] == copper)
        -: 1349:	{
       48: 1350:	  state->coins += 1;
        -: 1351:	}
       12: 1352:      else if (state->hand[player][i] == silver)
        -: 1353:	{
    #####: 1354:	  state->coins += 2;
        -: 1355:	}
       12: 1356:      else if (state->hand[player][i] == gold)
        -: 1357:	{
    #####: 1358:	  state->coins += 3;
        -: 1359:	}	
        -: 1360:    }	
        -: 1361:
        -: 1362:  //add bonus
       12: 1363:  state->coins += bonus;
        -: 1364:
       12: 1365:  return 0;
        -: 1366:}
        -: 1367:
        -: 1368:
        -: 1369://end of dominion.c
        -: 1370:
        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <string.h>
        -:    5:#include <stdio.h>
        -:    6:
function main called 1 returned 100% blocks executed 84%
        1:    7:int main()
        -:    8:{
        -:    9:	//Set variables to intialize game
        -:   10:	//Referenced provided code samples
        1:   11:	int numPlayers = 2 ;
        1:   12:	int kingdomCards[10] = {adventurer, council_room, feast, gardens, mine
        -:   13:               , remodel, smithy, village, baron, great_hall};
        1:   14:	int randomSeed = 1000 ;
        -:   15:	struct gameState G;
        1:   16:	int testPlayer = 0;
        1:   17:	int otherPlayer = 1;
        -:   18:
        -:   19:	//Track overall pass or fail
        1:   20:	int overall = 1;
        -:   21:
        -:   22:	//Intialize a game
        1:   23:	initializeGame(numPlayers,kingdomCards,randomSeed,&G);
call    0 returned 100%
        -:   24:
        1:   25:	printf("\n>>>Testing Function: shuffle(player,gameState)<<<\n");
call    0 returned 100%
        -:   26:
        1:   27:	printf("Updating Test and Other Players' deck to include cards 1-5... \n");
call    0 returned 100%
        -:   28:	//Updating the deck so shuffle can be shown better using different cards
        -:   29:	//Instead of intial hand of sever Coppers (4) and three estates (1)
        6:   30:	for (int i = 0; i < G.deckCount[0]; ++i)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:   31:	{
        5:   32:		G.deck[testPlayer][i] = i+1;
        -:   33:	}
        -:   34:	//Updating other players too to make sure there's is unchanged
        6:   35:	for (int i = 0; i < G.deckCount[0]; ++i)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:   36:	{
        5:   37:		G.deck[otherPlayer][i] = i+1;
        -:   38:	}
        -:   39:
        1:   40:	printf("Test Player's Current Deck: ");
call    0 returned 100%
        6:   41:	for (int i = 0; i < G.deckCount[testPlayer]; ++i)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:   42:	{
        5:   43:		printf("%d  ", G.deck[testPlayer][i]);
call    0 returned 100%
        -:   44:	}
        -:   45:	
        -:   46:	//Run shuffle on test player
        1:   47:	shuffle(testPlayer,&G);
call    0 returned 100%
        -:   48:
        -:   49:	//Show the shuffled deck
        1:   50:	printf("\nTest Player's Shuffled Deck: ");
call    0 returned 100%
        6:   51:	for (int i = 0; i < G.deckCount[testPlayer]; ++i)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:   52:	{
        5:   53:		printf("%d  ", G.deck[testPlayer][i]);
call    0 returned 100%
        -:   54:	}
        1:   55:	printf("\n");
call    0 returned 100%
        -:   56:
        1:   57:	printf("\n......Running Tests......\n");
call    0 returned 100%
        -:   58:	
        -:   59:	//Test that other player's deck remains unchanged
        1:   60:	printf("Other Player Deck is Not Changed: " );
call    0 returned 100%
        -:   61:	//Check deck size
        1:   62:	if(G.deckCount[testPlayer] != 5){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   63:		printf("FAILED \n");
call    0 never executed
    #####:   64:		overall = 0;
        -:   65:	}
        -:   66:	else{
        -:   67:		//Check same cards
        6:   68:		for (int i = 0; i < 5; ++i){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:   69:			if(G.deck[otherPlayer][i] != i+1){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   70:				printf("FAILED \n");
call    0 never executed
    #####:   71:				overall = 0;
        -:   72:			}
        5:   73:			else if (i == 4){
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        1:   74:				printf("PASSED \n");
call    0 returned 100%
        -:   75:			}
        -:   76:		}
        -:   77:	}
        -:   78:	
        -:   79:	//Test for the correct number of cards in the deck of test player
        1:   80:	printf("Number of Cards in Test Player's Deck Correct: ");
call    0 returned 100%
        1:   81:	if(G.deckCount[testPlayer] == 5){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   82:		printf("PASSED \n");
call    0 returned 100%
        -:   83:	}
        -:   84:	else{
    #####:   85:		printf("FAILED \n");
call    0 never executed
    #####:   86:		overall = 0;
        -:   87:	}
        -:   88:
        -:   89:	//Test for all the same cards in the deck of the test player
        1:   90:	printf("Test Player's Deck has Same Cards as Before Shuffle: " );
call    0 returned 100%
        -:   91:
        -:   92:	//Varible to track if card was found
        1:   93:	int found = 0;
        -:   94:	
        6:   95:	for (int i = 0; i < G.deckCount[testPlayer]; ++i){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:   96:				
        5:   97:		int j = 0;
       11:   98:		while(found == 0 && j < 5){
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
        -:   99:			//Search for each card 1-5
        1:  100:			if(G.deck[testPlayer][j] == i+1){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  101:				//if found, set found to true
        1:  102:				found = 1;
        -:  103:			}
        -:  104:		}
        -:  105:
        -:  106:		//If card was not found then test failed
        5:  107:		if (found == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  108:		{
    #####:  109:			printf("FAILED \n");
call    0 never executed
    #####:  110:			overall = 0;
        -:  111:		}
        -:  112:	}
        -:  113:
        -:  114:	//If all cards where found then test passed
        1:  115:	if (found == 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  116:	{
        1:  117:		printf("PASSED \n");
call    0 returned 100%
        -:  118:	}
        -:  119:
        -:  120:	//Test the deck was shuffled (not in same order)
        1:  121:	printf("Test Player's Deck Has Been Shuffled (in new order): " );
call    0 returned 100%
        -:  122:
        -:  123:	//Variable for if test passed
        1:  124:	int status = 0;
        -:  125:	//Check that at least one card has moved
        4:  126:	for (int i = 0; i < G.deckCount[testPlayer]; ++i){
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        3:  127:		if(G.deck[testPlayer][i] != i+1){
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        1:  128:			printf("PASSED \n\n");
call    0 returned 100%
        -:  129:			//Set status to passed so failed message does not print
        1:  130:			status = 1;
        -:  131:			//Exit loop
        1:  132:			i = G.deckCount[testPlayer];
        -:  133:		}
        -:  134:	}
        -:  135:
        -:  136:	//If test failed
        1:  137:	if(status == 0){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  138:		printf("FAILED \n\n");
call    0 never executed
    #####:  139:		overall = 0;
        -:  140:	}
        -:  141:
        -:  142:	//Finished Result
        1:  143:	if(overall == 0){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  144:		printf(">>>Testing of shuffle FAILED <<<\n");
call    0 never executed
        -:  145:	}
        -:  146:
        -:  147:	else{
        1:  148:		printf(">>>Testing of shuffle PASSED <<<\n");
call    0 returned 100%
        -:  149:	}
        -:  150:	
        -:  151:
        1:  152:	return 0;
        -:  153:}
        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <string.h>
        -:    5:#include <stdio.h>
        -:    6:
function main called 1 returned 100% blocks executed 84%
        1:    7:int main()
        -:    8:{
        -:    9:	//Set variables to intialize game
        -:   10:	//Referenced provided code samples
        1:   11:	int numPlayers = 2 ;
        1:   12:	int kingdomCards[10] = {adventurer, council_room, feast, gardens, mine
        -:   13:               , remodel, smithy, village, baron, great_hall};
        1:   14:	int randomSeed = 1000 ;
        -:   15:	struct gameState G;
        1:   16:	int testPlayer = 0;
        -:   17:
        -:   18:	//Track overall pass or fail
        1:   19:	int overall = 1;
        -:   20:
        -:   21:	//varible to hold deck count as tested
        -:   22:	int count;
        -:   23:
        -:   24:	//Intialize a game
        1:   25:	initializeGame(numPlayers,kingdomCards,randomSeed,&G);
call    0 returned 100%
        -:   26:
        1:   27:	printf("\n>>>Testing Function: fullDeckCount(player, card, gameState)<<<\n");
call    0 returned 100%
        -:   28:
        1:   29:	printf("\n......Running Tests......\n");
call    0 returned 100%
        -:   30:
        -:   31:	//Test the intial deck count is correct at 10
        1:   32:	printf("Intial Deck Count Correct: ");
call    0 returned 100%
        -:   33:
        -:   34:	//Run function
        1:   35:	count = fullDeckCount(testPlayer, 0, &G);
call    0 returned 100%
        -:   36:
        -:   37:	//New game should start with 10 cards total
        1:   38:	if(count == 10){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   39:		printf("PASSED \n");
call    0 never executed
        -:   40:	}
        -:   41:	else{
        1:   42:		printf("FAILED - Expected: 10 , Actual: %d \n", count);
call    0 returned 100%
        1:   43:		overall = 0;
        -:   44:	}
        -:   45:
        -:   46:	//Test for decrease count of hand, discard, and deck each by 1
        -:   47:
        -:   48:	//Decrease hand by 1
        1:   49:	G.handCount[testPlayer] -= 1;
        -:   50:
        -:   51:	//Run function
        1:   52:	count = fullDeckCount(testPlayer, 0, &G);
call    0 returned 100%
        -:   53:
        1:   54:	printf("Decrease in Hand Count Reflected Correctly in Full Deck Count: ");
call    0 returned 100%
        -:   55:
        1:   56:	if(count == 9){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   57:		printf("PASSED \n");
call    0 never executed
        -:   58:	}
        -:   59:	else{
        1:   60:		printf("FAILED - Expected: 9 , Actual: %d \n", count);
call    0 returned 100%
        1:   61:		overall = 0;
        -:   62:	}
        -:   63:
        -:   64:	//Decrease discard by 1
        1:   65:	G.discardCount[testPlayer] -= 1;
        -:   66:
        -:   67:	//Run function
        1:   68:	count = fullDeckCount(testPlayer, 0, &G);
call    0 returned 100%
        -:   69:
        1:   70:	printf("Decrease in Discard Count Reflected Correctly in Full Deck Count: ");
call    0 returned 100%
        -:   71:
        1:   72:	if(count == 8){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   73:		printf("PASSED \n");
call    0 never executed
        -:   74:	}
        -:   75:	else{
        1:   76:		printf("FAILED - Expected: 8 , Actual: %d \n", count);
call    0 returned 100%
        1:   77:		overall = 0;
        -:   78:	}
        -:   79:
        -:   80:	//Decrease deck by 1
        1:   81:	G.deckCount[testPlayer] -= 1;
        -:   82:
        -:   83:	//Run function
        1:   84:	count = fullDeckCount(testPlayer, 0, &G);
call    0 returned 100%
        -:   85:
        1:   86:	printf("Decrease in Deck Count Reflected Correctly in Full Deck Count: ");
call    0 returned 100%
        -:   87:
        1:   88:	if(count == 7){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   89:		printf("PASSED \n\n");
call    0 never executed
        -:   90:	}
        -:   91:	else{
        1:   92:		printf("FAILED - Expected: 7 , Actual: %d \n\n", count);
call    0 returned 100%
        1:   93:		overall = 0;
        -:   94:	}
        -:   95:
        -:   96:	//Finished Result
        1:   97:	if(overall == 0){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   98:		printf(">>>Testing of fullDeckCount FAILED <<<\n");
call    0 returned 100%
        -:   99:	}
        -:  100:
        -:  101:	else{
    #####:  102:		printf(">>>Testing of fullDeckCount PASSED <<<\n");
call    0 never executed
        -:  103:	}
        -:  104:
        1:  105:	return 0;
        -:  106:}
        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <string.h>
        -:    5:#include <stdio.h>
        -:    6:
function main called 1 returned 100% blocks executed 73%
        1:    7:int main()
        -:    8:{
        -:    9:	//Set variables to intialize game
        -:   10:	//Referenced provided code samples
        1:   11:	int numPlayers = 2 ;
        1:   12:	int kingdomCards[10] = {adventurer, council_room, feast, gardens, mine
        -:   13:               , remodel, smithy, village, baron, great_hall};
        1:   14:	int randomSeed = 1000 ;
        -:   15:	struct gameState G;
        1:   16:	int playerOne = 0;
        1:   17:	int playerTwo = 1;
        -:   18:
        -:   19:	//Track overall pass or fail
        1:   20:	int overall = 1;
        -:   21:
        -:   22:	//Variable to track the turn returned from the function
        -:   23:	int turn;
        -:   24:
        -:   25:	//Intialize a game
        1:   26:	initializeGame(numPlayers,kingdomCards,randomSeed,&G);
call    0 returned 100%
        -:   27:
        1:   28:	printf("\n>>>Testing Function: whooseTurn(gameState)<<<\n");
call    0 returned 100%
        -:   29:
        1:   30:	printf("\n......Running Tests......\n");
call    0 returned 100%
        -:   31:
        -:   32:	//Test first turn is player one
        1:   33:	printf("First Turn is Player One: ");
call    0 returned 100%
        -:   34:
        -:   35:	//Run function
        1:   36:	turn = whoseTurn(&G);
call    0 returned 100%
        -:   37:
        1:   38:	if(turn == playerOne){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   39:		printf("PASSED \n");
call    0 returned 100%
        -:   40:	}
        -:   41:	else{
    #####:   42:		printf("FAILED - Expected: 0 , Actual: %d \n", turn);
call    0 never executed
    #####:   43:		overall = 0;
        -:   44:	}
        -:   45:
        -:   46:	//Change turn to player two and test
        1:   47:	printf("Player Two Turn Correct: ");
call    0 returned 100%
        1:   48:	G.whoseTurn = playerTwo;
        -:   49:
        -:   50:	//Run function
        1:   51:	turn = whoseTurn(&G);
call    0 returned 100%
        -:   52:
        1:   53:	if(turn == playerTwo){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   54:		printf("PASSED \n");
call    0 returned 100%
        -:   55:	}
        -:   56:	else{
    #####:   57:		printf("FAILED - Expected: 1 , Actual: %d \n", turn);
call    0 never executed
    #####:   58:		overall = 0;
        -:   59:	}
        -:   60:
        -:   61:	//Change turn back to player one and test
        1:   62:	printf("Player One Turn Correct: ");
call    0 returned 100%
        1:   63:	G.whoseTurn = playerOne;
        -:   64:
        -:   65:	//Run function
        1:   66:	turn = whoseTurn(&G);
call    0 returned 100%
        -:   67:
        1:   68:	if(turn == playerOne){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   69:		printf("PASSED \n\n");
call    0 returned 100%
        -:   70:	}
        -:   71:	else{
    #####:   72:		printf("FAILED - Expected: 0 , Actual: %d \n\n", turn);
call    0 never executed
    #####:   73:		overall = 0;
        -:   74:	}
        -:   75:
        -:   76:	//Finished Result
        1:   77:	if(overall == 0){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   78:		printf(">>>Testing of whoseTurn FAILED <<<\n");
call    0 never executed
        -:   79:	}
        -:   80:
        -:   81:	else{
        1:   82:		printf(">>>Testing of whoseTurn PASSED <<<\n");
call    0 returned 100%
        -:   83:	}
        -:   84:
        1:   85:	return 0;
        -:   86:}
        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <string.h>
        -:    5:#include <stdio.h>
        -:    6:
function main called 1 returned 100% blocks executed 75%
        1:    7:int main()
        -:    8:{
        -:    9:	//Set variables to intialize game
        -:   10:	//Referenced provided code samples
        1:   11:	int numPlayers = 2 ;
        1:   12:	int kingdomCards[10] = {adventurer, council_room, feast, gardens, mine
        -:   13:               , remodel, smithy, village, baron, great_hall};
        1:   14:	int randomSeed = 1000 ;
        -:   15:	struct gameState G;
        -:   16:
        -:   17:	//Track overall pass or fail
        1:   18:	int overall = 1;
        -:   19:
        -:   20:	//Variable to track the hand countreturned from the function
        -:   21:	int count;
        -:   22:
        -:   23:	//Intialize a game
        1:   24:	initializeGame(numPlayers,kingdomCards,randomSeed,&G);
call    0 returned 100%
        -:   25:
        1:   26:	printf("\n>>>Testing Function: numHandCards(gameState)<<<\n");
call    0 returned 100%
        -:   27:
        1:   28:	printf("\n......Running Tests......\n");
call    0 returned 100%
        -:   29:
        -:   30:	//Test intial hand count is 5 for both players
        1:   31:	printf("Hand Card Count for Player One Correct: ");
call    0 returned 100%
        -:   32:
        -:   33:	//Run function
        1:   34:	count = numHandCards(&G);
call    0 returned 100%
        -:   35:
        1:   36:	if(count == 5){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   37:		printf("PASSED \n");
call    0 returned 100%
        -:   38:	}
        -:   39:	else{
    #####:   40:		printf("FAILED - Expected: 5 , Actual: %d \n", count);
call    0 never executed
    #####:   41:		overall = 0;
        -:   42:	}
        -:   43:
        -:   44:	//Change turn to player two and test hand count
        1:   45:	G.whoseTurn = 1;
        1:   46:	printf("Hand Card Count for Player Two Correct: ");
call    0 returned 100%
        -:   47:
        -:   48:	//Run function
        1:   49:	count = numHandCards(&G);
call    0 returned 100%
        -:   50:
        -:   51:	//Player two won't draw their hand cards until their first turn in the game
        -:   52:	//(Based on game intialization function)
        1:   53:	if(count == 0){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   54:		printf("PASSED \n\n");
call    0 returned 100%
        -:   55:	}
        -:   56:	else{
    #####:   57:		printf("FAILED - Expected: 5 , Actual: %d \n\n", count);
call    0 never executed
    #####:   58:		overall = 0;
        -:   59:	}
        -:   60:
        -:   61:	//Finished Result
        1:   62:	if(overall == 0){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   63:		printf(">>>Testing of numHandCards FAILED <<<\n");
call    0 never executed
        -:   64:	}
        -:   65:
        -:   66:	else{
        1:   67:		printf(">>>Testing of numHandCards PASSED <<<\n");
call    0 returned 100%
        -:   68:	}
        -:   69:
        1:   70:	return 0;
        -:   71:}
        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <string.h>
        -:    5:#include <stdio.h>
        -:    6:
function main called 1 returned 100% blocks executed 65%
        1:    7:int main()
        -:    8:{
        -:    9:	//Set variables to intialize game
        -:   10:	//Referenced provided code samples
        1:   11:	int numPlayers = 2 ;
        1:   12:	int kingdomCards[10] = {adventurer, council_room, feast, gardens, mine
        -:   13:               , remodel, smithy, village, baron, great_hall};
        1:   14:	int randomSeed = 1000 ;
        -:   15:	struct gameState G;
        -:   16:	struct gameState copyG;
        1:   17:	int testPlayer = 0;
        1:   18:	int otherPlayer = 1;
        1:   19:	int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        1:   20:	int newCards = 3;
        1:   21:	int discarded = 1;
        -:   22:
        -:   23:	//Track overall pass or fail
        1:   24:	int overall = 1;
        -:   25:
        -:   26:	//Intialize a game
        1:   27:	initializeGame(numPlayers,kingdomCards,randomSeed,&G);
call    0 returned 100%
        -:   28:
        -:   29:	//Copy current game state to use later to make sure parts of game state changes correctly
        1:   30:	memcpy(&copyG, &G, sizeof(struct gameState));
        -:   31:
        1:   32:	printf("\n>>>Testing Card: Smithy <<<\n");
call    0 returned 100%
        -:   33:
        1:   34:	printf("\n......Running Tests......\n");
call    0 returned 100%
        -:   35:
        -:   36:	//Run function cardEffect using smithy
        1:   37:	cardEffect(smithy,choice1,choice2,choice3,&G,handpos,&bonus);
call    0 returned 100%
        -:   38:
        1:   39:	printf("Draw 3 Cards Added to Hand (Test Player's Hand Increased Correctly) : ");
call    0 returned 100%
        -:   40:	//Hand should have 3 more cards than before smithy was used
        1:   41:	if(G.handCount[testPlayer] == (copyG.handCount[testPlayer] + newCards)){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   42:		printf("PASSED \n");
call    0 returned 100%
        -:   43:	}
        -:   44:	else{
    #####:   45:		printf("FAILED - Expected Hand Count: %d , Actual: %d \n",(copyG.handCount[testPlayer] + newCards), G.handCount[testPlayer] );
call    0 never executed
    #####:   46:		overall = 0;
        -:   47:	}
        -:   48:
        -:   49:
        1:   50:	printf("3 Cards Drawn from Player's Deck (Test Player's Deck Decreased Correctly): ");
call    0 returned 100%
        -:   51:	//Deck should have 3 less cards
        1:   52:	if(G.deckCount[testPlayer] == (copyG.deckCount[testPlayer] - newCards)){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   53:		printf("PASSED \n");
call    0 returned 100%
        -:   54:	}
        -:   55:	else{
    #####:   56:		printf("FAILED - Expected Deck Count: %d , Actual: %d \n",(copyG.deckCount[testPlayer] - newCards), G.deckCount[testPlayer] );
call    0 never executed
    #####:   57:		overall = 0;
        -:   58:	}
        -:   59:
        -:   60:
        1:   61:	printf("3 Cards Drawn from Player's Deck (Test Player's Hand Includes Copper or Estate Only): ");
call    0 returned 100%
        -:   62:	//Varible for the correct cards
        1:   63:	int playerCards = 1;
        -:   64:
        -:   65:	//Loop through player hand and check for cards other than copper and estates
        9:   66:	for(int i = 0; i < G.handCount[testPlayer]; i++){
branch  0 taken 89%
branch  1 taken 11% (fallthrough)
        8:   67:		if(G.hand[testPlayer][i] != 1 && G.hand[testPlayer][i] != 4){
branch  0 taken 88% (fallthrough)
branch  1 taken 13%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   68:			//Card is not from player's deck set to false
    #####:   69:			playerCards = 0;
        -:   70:		}
        -:   71:	}
        -:   72:
        -:   73:	//If card is not from player's deck then failed test
        1:   74:	if(playerCards == 0){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   75:		printf("FAILED \n");
call    0 never executed
    #####:   76:		overall = 0;
        -:   77:	}
        -:   78:	else{
        1:   79:		printf("PASSED \n");
call    0 returned 100%
        -:   80:	}
        -:   81:
        -:   82:
        1:   83:	printf("Test Player Discarded Smithy (Discard Count is Increased Correctly): ");
call    0 returned 100%
        -:   84:	//Discard count should be 1
        1:   85:	if(G.discardCount[testPlayer] == discarded){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   86:		printf("PASSED \n");
call    0 never executed
        -:   87:	}
        -:   88:	else{
        1:   89:		printf("FAILED - Expected Discard Count: %d , Actual: %d \n", discarded, G.discardCount[testPlayer]) ;
call    0 returned 100%
        1:   90:		overall = 0;
        -:   91:	}
        -:   92:
        -:   93:
        1:   94:	printf("Test Player Discarded Smithy (Discard Pile Contains Smithy): ");
call    0 returned 100%
        -:   95:	//Varible for the containing smithy
        1:   96:	int contains = 0;
        -:   97:
        -:   98:	//Loop through player discard pile and check for smithy
        1:   99:	for(int i = 0; i < G.discardCount[testPlayer]; i++){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  100:		if(G.discard[testPlayer][i] == 13){
branch  0 never executed
branch  1 never executed
        -:  101:			//Card is in discard, set true
    #####:  102:			contains = 1;
        -:  103:		}
        -:  104:	}
        -:  105:	
        1:  106:	if(contains == 0){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  107:		printf("FAILED \n");
call    0 returned 100%
        1:  108:		overall = 0;
        -:  109:	}
        -:  110:	else{
    #####:  111:		printf("PASSED \n");
call    0 never executed
        -:  112:	}
        -:  113:
        -:  114:
        -:  115:	//Check the game state is unaffected by smithy by compare previous game state to current game state
        -:  116:	
        1:  117:	printf("Game State Remains Unchanged (Other Player's Hand Count is Unchanged): ");
call    0 returned 100%
        -:  118:	//check other player's hand count is the same as before smithy was used
        1:  119:	if(copyG.handCount[otherPlayer] == G.handCount[otherPlayer]){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  120:		printf("PASSED \n");
call    0 returned 100%
        -:  121:	}
        -:  122:	else{
    #####:  123:		printf("FAILED - Expected Hand Count: %d , Actual: %d \n", copyG.handCount[otherPlayer], G.handCount[otherPlayer]) ;
call    0 never executed
    #####:  124:		overall = 0;
        -:  125:	}
        -:  126:
        -:  127:
        1:  128:	printf("Game State Remains Unchanged (Other Player's Deck Count is Unchanged): ");
call    0 returned 100%
        -:  129:	//check other player's deck count is the same as before smithy was used
        1:  130:	if(copyG.deckCount[otherPlayer] == G.deckCount[otherPlayer]){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  131:		printf("PASSED \n");
call    0 returned 100%
        -:  132:	}
        -:  133:	else{
    #####:  134:		printf("FAILED - Expected Deck Count: %d , Actual: %d \n", copyG.deckCount[otherPlayer], G.deckCount[otherPlayer]) ;
call    0 never executed
    #####:  135:		overall = 0;
        -:  136:	}
        -:  137:
        -:  138:
        1:  139:	printf("Game State Remains Unchanged (Other Player's Discard Count is Unchanged): ");
call    0 returned 100%
        -:  140:	//check other player's discard count is the same as before smithy was used
        1:  141:	if(copyG.discardCount[otherPlayer] == G.discardCount[otherPlayer]){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  142:		printf("PASSED \n");
call    0 returned 100%
        -:  143:	}
        -:  144:	else{
    #####:  145:		printf("FAILED - Expected Discard Count: %d , Actual: %d \n", copyG.discardCount[otherPlayer], G.discardCount[otherPlayer]) ;
call    0 never executed
    #####:  146:		overall = 0;
        -:  147:	}
        -:  148:
        -:  149:
        1:  150:	printf("Game State Remains Unchanged (Supply Count for Victory Cards is Unchanged): ");
call    0 returned 100%
        -:  151:	//varible to track supply is unchanged
        1:  152:	int supplyUnchanged = 1;
        -:  153:
        -:  154:	//Check count of all victory cards
        1:  155:	if(supplyCount(estate, &copyG) != supplyCount(estate, &G)){
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  156:		supplyUnchanged = 0;
    #####:  157:		printf("FAILED For Estate Count: Expected: %d Actual:%d \n",supplyCount(estate,&copyG), supplyCount(estate, &G) );
call    0 never executed
call    1 never executed
call    2 never executed
        -:  158:	}
        1:  159:	if(supplyCount(duchy, &copyG) != supplyCount(duchy, &G)){
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  160:		supplyUnchanged = 0;
    #####:  161:		printf("FAILED For Duchy Count: Expected: %d Actual:%d \n",supplyCount(duchy,&copyG), supplyCount(duchy, &G) );
call    0 never executed
call    1 never executed
call    2 never executed
        -:  162:	}	
        1:  163:	if(supplyCount(province, &copyG) != supplyCount(province, &G)){
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  164:		supplyUnchanged = 0;
    #####:  165:		printf("FAILED For Province Count: Expected: %d Actual:%d \n",supplyCount(province,&copyG), supplyCount(province, &G) );
call    0 never executed
call    1 never executed
call    2 never executed
        -:  166:	}
        -:  167:	
        -:  168:
        1:  169:	if(supplyUnchanged == 1){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  170:		printf("PASSED\n");
call    0 returned 100%
        -:  171:	}
        -:  172:
        -:  173:
        1:  174:	printf("Game State Remains Unchanged (Supply Count for Coin Cards is Unchanged): ");
call    0 returned 100%
        -:  175:	//varible to track supply is unchanged
        1:  176:	supplyUnchanged = 1;
        -:  177:
        -:  178:	//Check count of all coins
        1:  179:	if(supplyCount(copper, &copyG) != supplyCount(copper, &G)){
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  180:		supplyUnchanged = 0;
    #####:  181:		printf("FAILED For copper Count: Expected: %d Actual:%d \n",supplyCount(copper,&copyG), supplyCount(copper, &G) );
call    0 never executed
call    1 never executed
call    2 never executed
        -:  182:	}
        1:  183:	if(supplyCount(silver, &copyG) != supplyCount(silver, &G)){
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  184:		supplyUnchanged = 0;
    #####:  185:		printf("FAILED For silver Count: Expected: %d Actual:%d \n",supplyCount(silver,&copyG), supplyCount(silver, &G) );
call    0 never executed
call    1 never executed
call    2 never executed
        -:  186:	}
        1:  187:	if(supplyCount(gold, &copyG) != supplyCount(gold, &G)){
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  188:		supplyUnchanged = 0;
    #####:  189:		printf("FAILED For gold Count: Expected: %d Actual:%d \n",supplyCount(gold,&copyG), supplyCount(gold, &G) );
call    0 never executed
call    1 never executed
call    2 never executed
        -:  190:	}
        -:  191:
        1:  192:	if(supplyUnchanged == 1){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  193:		printf("PASSED\n");
call    0 returned 100%
        -:  194:	}
        -:  195:
        1:  196:	printf("Game State Remains Unchanged (Supply Count for All Kingdom Cards is Unchanged): ");
call    0 returned 100%
        -:  197:	//varible to track supply is unchanged
        1:  198:	supplyUnchanged = 1;
        -:  199:
        -:  200:	//Check each kingdom card
       11:  201:	for(int i = 0; i < 10; i++){
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       10:  202:		if(supplyCount(kingdomCards[i], &copyG) != supplyCount(kingdomCards[i], &G)){
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  203:			supplyUnchanged = 0;
    #####:  204:			printf("FAILED For kingdom Card %d Count: Expected: %d Actual:%d \n",i ,supplyCount(kingdomCards[i],&copyG), supplyCount(kingdomCards[i], &G) );
call    0 never executed
call    1 never executed
call    2 never executed
        -:  205:		}
        -:  206:	}
        -:  207:
        1:  208:	if(supplyUnchanged == 1){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  209:		printf("PASSED\n\n");
call    0 returned 100%
        -:  210:	}	
        -:  211:
        -:  212:	//Finished Result
        1:  213:	if(overall == 0){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  214:		printf(">>>Testing of Smithy FAILED <<<\n");
call    0 returned 100%
        -:  215:	}
        -:  216:
        -:  217:	else{
    #####:  218:		printf(">>>Testing of Smithy PASSED <<<\n");
call    0 never executed
        -:  219:	}
        -:  220:
        1:  221:	return 0;
        -:  222:}
        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <string.h>
        -:    5:#include <stdio.h>
        -:    6:
function main called 1 returned 100% blocks executed 84%
        1:    7:int main()
        -:    8:{
        -:    9:	//Set variables to intialize game
        -:   10:	//Referenced provided code samples
        1:   11:	int numPlayers = 2 ;
        1:   12:	int kingdomCards[10] = {adventurer, council_room, feast, gardens, mine
        -:   13:               , remodel, smithy, village, baron, great_hall};
        1:   14:	int randomSeed = 1000 ;
        -:   15:	struct gameState G;
        -:   16:	struct gameState copyG;
        1:   17:	int testPlayer = 0;
        1:   18:	int otherPlayer = 1;
        1:   19:	int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        -:   20:	//Number of treasure cards which should be added to hand after adventurer used
        -:   21:	int treasureCards;
        -:   22:	//Treasure in hand before adventurer used
        -:   23:	int currentTreasure;
        -:   24:
        -:   25:	//Track overall pass or fail
        1:   26:	int overall = 1;
        -:   27:
        1:   28:	printf("\n>>>Testing Card: adventurer <<<\n");
call    0 returned 100%
        -:   29:
        1:   30:	printf("\n......Running Tests......\n");
call    0 returned 100%
        -:   31:
        -:   32:
        -:   33:
        -:   34:	//Loop for each test case
        6:   35:	for(int i = 0; i < 5; i++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:   36:		if(i == 0){
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        -:   37:			//Intialize a game
        1:   38:			initializeGame(numPlayers,kingdomCards,randomSeed,&G);
call    0 returned 100%
        -:   39:
        -:   40:			//Update deck to have 0 treasure cards
        6:   41:			for (int i = 0; i < G.deckCount[0]; ++i){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:   42:				G.deck[testPlayer][i] = 1;
        -:   43:			}
        -:   44:
        -:   45:			//Set treasure cards in deck to 0
        1:   46:			treasureCards = 0;
        -:   47:
        -:   48:			//Get current number of treasure cards in hand
        1:   49:			currentTreasure = 0;
        -:   50:
        6:   51:			for(int i = 0; i < G.handCount[testPlayer]; i++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:   52:				if(G.hand[testPlayer][i] == 4 ||G.hand[testPlayer][i] == 5 ||G.hand[testPlayer][i] == 6){
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        -:   53:					//Increase current treasure count by 1
        4:   54:					currentTreasure += 1;
        -:   55:				}
        -:   56:			} 
        -:   57:
        -:   58:			//Copy current game state to use later to make sure parts of game state changes correctly
        1:   59:			memcpy(&copyG, &G, sizeof(struct gameState));
        -:   60:
        1:   61:			printf("<<Test Case 1: Deck has 0 Treasure cards>>\n");
call    0 returned 100%
        -:   62:		}
        -:   63:
        4:   64:		else if(i == 1){
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:   65:			//Clear game state
        1:   66:			memset(&G,23,sizeof(struct gameState));
        1:   67:			memset(&copyG,23,sizeof(struct gameState));
        -:   68:
        -:   69:			//Intialize a game
        1:   70:			initializeGame(numPlayers,kingdomCards,randomSeed,&G);
call    0 returned 100%
        -:   71:
        -:   72:			//Update deck to have 1 treasure cards
        6:   73:			for (int i = 0; i < G.deckCount[0]; ++i){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:   74:				if(i == 0){
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        1:   75:					G.deck[testPlayer][i] = 4;
        -:   76:				}
        -:   77:				else{
        4:   78:				G.deck[testPlayer][i] = 1;
        -:   79:				}
        -:   80:			}
        -:   81:
        -:   82:			//Set treasure cards in deck to 1
        1:   83:			treasureCards = 1;
        -:   84:
        -:   85:			//Get current number of treasure cards in hand
        1:   86:			currentTreasure = 0;
        -:   87:
        6:   88:			for(int i = 0; i < G.handCount[testPlayer]; i++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:   89:				if(G.hand[testPlayer][i] == 4 ||G.hand[testPlayer][i] == 5 ||G.hand[testPlayer][i] == 6){
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        -:   90:					//Increase current treasure count by 1
        4:   91:					currentTreasure += 1;
        -:   92:				}
        -:   93:			} 
        -:   94:			//Copy current game state to use later to make sure parts of game state changes correctly
        1:   95:			memcpy(&copyG, &G, sizeof(struct gameState));
        -:   96:
        1:   97:			printf("<<Test Case 2: Deck has 1 Treasure card>>\n");			
call    0 returned 100%
        -:   98:
        -:   99:		}
        -:  100:
        3:  101:		else if(i == 2){
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:  102:			//Clear game state
        1:  103:			memset(&G,23,sizeof(struct gameState));
        1:  104:			memset(&copyG,23,sizeof(struct gameState));
        -:  105:
        -:  106:			//Intialize a game
        1:  107:			initializeGame(numPlayers,kingdomCards,randomSeed,&G);
call    0 returned 100%
        -:  108:
        -:  109:			//Update deck to have 2 treasure cards
        6:  110:			for (int i = 0; i < G.deckCount[0]; ++i){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:  111:				if(i == 0){
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        1:  112:					G.deck[testPlayer][i] = 4;
        -:  113:				}
        4:  114:				else if(i ==1){
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        1:  115:					G.deck[testPlayer][i] = 5;
        -:  116:				}
        -:  117:				else{
        3:  118:				G.deck[testPlayer][i] = 1;
        -:  119:				}
        -:  120:			}
        -:  121:
        -:  122:			//Set treasure cards in deck to 2
        1:  123:			treasureCards = 2;
        -:  124:
        -:  125:			//Get current number of treasure cards in hand
        1:  126:			currentTreasure = 0;
        -:  127:
        6:  128:			for(int i = 0; i < G.handCount[testPlayer]; i++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:  129:				if(G.hand[testPlayer][i] == 4 ||G.hand[testPlayer][i] == 5 ||G.hand[testPlayer][i] == 6){
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        -:  130:					//Increase current treasure count by 1
        4:  131:					currentTreasure += 1;
        -:  132:				}
        -:  133:			} 
        -:  134:			//Copy current game state to use later to make sure parts of game state changes correctly
        1:  135:			memcpy(&copyG, &G, sizeof(struct gameState));
        -:  136:
        1:  137:			printf("<<Test Case 3: Deck has 2 Treasure cards>>\n");			
call    0 returned 100%
        -:  138:
        -:  139:		}
        -:  140:
        2:  141:		else if(i == 3){
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  142:			//Clear game state
        1:  143:			memset(&G,23,sizeof(struct gameState));
        1:  144:			memset(&copyG,23,sizeof(struct gameState));
        -:  145:
        -:  146:			//Intialize a game
        1:  147:			initializeGame(numPlayers,kingdomCards,randomSeed,&G);
call    0 returned 100%
        -:  148:
        -:  149:			//Update deck to have 3 treasure cards
        6:  150:			for (int i = 0; i < G.deckCount[0]; ++i){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:  151:				if(i == 0){
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        1:  152:					G.deck[testPlayer][i] = 4;
        -:  153:				}
        4:  154:				else if(i ==1){
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        1:  155:					G.deck[testPlayer][i] = 5;
        -:  156:				}
        3:  157:				else if(i ==2){
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        1:  158:					G.deck[testPlayer][i] = 6;
        -:  159:				}
        -:  160:				else{
        2:  161:				G.deck[testPlayer][i] = 1;
        -:  162:				}
        -:  163:			}
        -:  164:
        -:  165:			//Set treasure cards in deck to 3
        1:  166:			treasureCards = 3;
        -:  167:
        -:  168:			//Get current number of treasure cards in hand
        1:  169:			currentTreasure = 0;
        -:  170:
        6:  171:			for(int i = 0; i < G.handCount[testPlayer]; i++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:  172:				if(G.hand[testPlayer][i] == 4 ||G.hand[testPlayer][i] == 5 ||G.hand[testPlayer][i] == 6){
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        -:  173:					//Increase current treasure count by 1
        4:  174:					currentTreasure += 1;
        -:  175:				}
        -:  176:			} 
        -:  177:			//Copy current game state to use later to make sure parts of game state changes correctly
        1:  178:			memcpy(&copyG, &G, sizeof(struct gameState));
        -:  179:
        1:  180:			printf("<<Test Case 4: Deck has 3 Treasure cards>>\n");			
call    0 returned 100%
        -:  181:
        -:  182:		}		
        -:  183:
        1:  184:		else if(i == 4){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  185:			//Clear game state
        1:  186:			memset(&G,23,sizeof(struct gameState));
        1:  187:			memset(&copyG,23,sizeof(struct gameState));
        -:  188:
        -:  189:			//Intialize a game
        1:  190:			initializeGame(numPlayers,kingdomCards,randomSeed,&G);
call    0 returned 100%
        -:  191:
        -:  192:			//Update deck to have 5 treasure cards
        6:  193:			for (int i = 0; i < G.deckCount[0]; ++i){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:  194:					G.deck[testPlayer][i] = 4;
        -:  195:			}
        -:  196:
        -:  197:			//Set treasure cards in deck to 5
        1:  198:			treasureCards = 5;
        -:  199:
        -:  200:			//Get current number of treasure cards in hand
        1:  201:			currentTreasure = 0;
        -:  202:
        6:  203:			for(int i = 0; i < G.handCount[testPlayer]; i++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:  204:				if(G.hand[testPlayer][i] == 4 ||G.hand[testPlayer][i] == 5 ||G.hand[testPlayer][i] == 6){
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        -:  205:					//Increase current treasure count by 1
        4:  206:					currentTreasure += 1;
        -:  207:				}
        -:  208:			} 
        -:  209:			//Copy current game state to use later to make sure parts of game state changes correctly
        1:  210:			memcpy(&copyG, &G, sizeof(struct gameState));
        -:  211:
        1:  212:			printf("<<Test Case 4: Deck has 5 Treasure cards>>\n");			
call    0 returned 100%
        -:  213:
        -:  214:		}
        -:  215:
        -:  216:
        -:  217:
        -:  218:		//Test card using card effect
        5:  219:		cardEffect(adventurer,choice1,choice2,choice3,&G,handpos,&bonus);
call    0 returned 100%
        -:  220:
        -:  221:
        5:  222:		printf("Found Treasures Added to Hand (Hand Count Increased Correctly): ");
call    0 returned 100%
        5:  223:		if(copyG.handCount[testPlayer]+ treasureCards == G.handCount[testPlayer]){
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        4:  224:			printf("PASSED \n");
call    0 returned 100%
        -:  225:		}
        -:  226:		else{
        1:  227:			printf("FAILED - Expected Count: %d  Actual: %d \n",(copyG.handCount[testPlayer] + treasureCards), G.handCount[testPlayer]);	
call    0 returned 100%
        1:  228:			overall = 0;
        -:  229:		}
        -:  230:
        -:  231:
        5:  232:		printf("Found Treasures Added to Hand (Deck Count Decreased Correctly): ");
call    0 returned 100%
        5:  233:		if(copyG.deckCount[testPlayer] - treasureCards == G.deckCount[testPlayer]){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  234:			printf("PASSED \n");
call    0 never executed
        -:  235:		}
        -:  236:		else{
        5:  237:			printf("FAILED - Expected Count: %d  Actual: %d \n",(copyG.deckCount[testPlayer] - treasureCards), G.deckCount[testPlayer]);	
call    0 returned 100%
        5:  238:			overall = 0;
        -:  239:		}
        -:  240:
        -:  241:
        5:  242:		printf("Found Treasures Added to Hand  (Deck + Hand Count Unchanged): ");
call    0 returned 100%
        5:  243:		if((copyG.handCount[testPlayer] + copyG.deckCount[testPlayer]) == (G.handCount[testPlayer] + G.deckCount[testPlayer])){
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        1:  244:			printf("PASSED \n");
call    0 returned 100%
        -:  245:		}
        -:  246:		else{
        4:  247:			printf("FAILED - Expected Count: %d  Actual: %d \n",(copyG.handCount[testPlayer] + copyG.deckCount[testPlayer]), (G.handCount[testPlayer]+G.deckCount[testPlayer]) );
call    0 returned 100%
        4:  248:			overall = 0;
        -:  249:		}
        -:  250:	
        5:  251:		printf("Added Cards are Treasure Cards (Current Treasure Count Increased Correctly): ");
call    0 returned 100%
        -:  252:		//Use to store treasure currently in had after adventurer
        5:  253:		int treasureInHand = 0;
        -:  254:
       39:  255:		for(int i = 0; i < G.handCount[testPlayer]; i++){
branch  0 taken 87%
branch  1 taken 13% (fallthrough)
       34:  256:			if(G.hand[testPlayer][i] == 4 ||G.hand[testPlayer][i] == 5 ||G.hand[testPlayer][i] == 6){
branch  0 taken 24% (fallthrough)
branch  1 taken 76%
branch  2 taken 75% (fallthrough)
branch  3 taken 25%
branch  4 taken 17% (fallthrough)
branch  5 taken 83%
        -:  257:				//Increase current treasure count by 1
       29:  258:					treasureInHand += 1;
        -:  259:				}
        -:  260:		}		
        -:  261:
        5:  262:		if(treasureInHand == currentTreasure + treasureCards){
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        4:  263:			printf("PASSED \n");
call    0 returned 100%
        -:  264:		}
        -:  265:		else{
        1:  266:			printf("FAILED - Expected Count: %d  Actual: %d \n",(currentTreasure + treasureCards), treasureInHand);
call    0 returned 100%
        1:  267:			overall = 0;
        -:  268:		}
        -:  269:
        -:  270:
        5:  271:		printf("Test Player Discarded adventurer (Discard Pile Contains adventurer): ");
call    0 returned 100%
        -:  272:		//Varible for the containing adventurer
        5:  273:		int contains = 0;
        -:  274:
        -:  275:		//Loop through player discard pile and check for adventurer
       19:  276:		for(int i = 0; i < G.discardCount[testPlayer]; i++){
branch  0 taken 74%
branch  1 taken 26% (fallthrough)
       14:  277:			if(G.discard[testPlayer][i] == 7){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  278:				//Card is in discard, set true
    #####:  279:				contains = 1;
        -:  280:			}
        -:  281:		}
        -:  282:	
        5:  283:		if(contains == 0){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        5:  284:			printf("FAILED \n");
call    0 returned 100%
        5:  285:			overall = 0;
        -:  286:		}
        -:  287:		else{
    #####:  288:			printf("PASSED \n");
call    0 never executed
        -:  289:		}
        -:  290:
        -:  291:	
        -:  292:
        -:  293:	//Check the game state is unaffected by adventurer by compare previous game state to current game state
        -:  294:	
        5:  295:	printf("Game State Remains Unchanged (Other Player's Hand Count is Unchanged): ");
call    0 returned 100%
        -:  296:	//check other player's hand count is the same as before adventurer was used
        5:  297:	if(copyG.handCount[otherPlayer] == G.handCount[otherPlayer]){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        5:  298:		printf("PASSED \n");
call    0 returned 100%
        -:  299:	}
        -:  300:	else{
    #####:  301:		printf("FAILED - Expected Hand Count: %d , Actual: %d \n", copyG.handCount[otherPlayer], G.handCount[otherPlayer]) ;
call    0 never executed
    #####:  302:		overall = 0;
        -:  303:	}
        -:  304:
        -:  305:
        5:  306:	printf("Game State Remains Unchanged (Other Player's Deck Count is Unchanged): ");
call    0 returned 100%
        -:  307:	//check other player's deck count is the same as before adventurer was used
        5:  308:	if(copyG.deckCount[otherPlayer] == G.deckCount[otherPlayer]){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        5:  309:		printf("PASSED \n");
call    0 returned 100%
        -:  310:	}
        -:  311:	else{
    #####:  312:		printf("FAILED - Expected Deck Count: %d , Actual: %d \n", copyG.deckCount[otherPlayer], G.deckCount[otherPlayer]) ;
call    0 never executed
    #####:  313:		overall = 0;
        -:  314:	}
        -:  315:
        -:  316:
        5:  317:	printf("Game State Remains Unchanged (Other Player's Discard Count is Unchanged): ");
call    0 returned 100%
        -:  318:	//check other player's discard count is the same as before adventurer was used
        5:  319:	if(copyG.discardCount[otherPlayer] == G.discardCount[otherPlayer]){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        5:  320:		printf("PASSED \n");
call    0 returned 100%
        -:  321:	}
        -:  322:	else{
    #####:  323:		printf("FAILED - Expected Discard Count: %d , Actual: %d \n", copyG.discardCount[otherPlayer], G.discardCount[otherPlayer]) ;
call    0 never executed
    #####:  324:		overall = 0;
        -:  325:	}
        -:  326:
        -:  327:
        5:  328:	printf("Game State Remains Unchanged (Supply Count for Victory Cards is Unchanged): ");
call    0 returned 100%
        -:  329:	//varible to track supply is unchanged
        5:  330:	int supplyUnchanged = 1;
        -:  331:
        -:  332:	//Check count of all victory cards
        5:  333:	if(supplyCount(estate, &copyG) != supplyCount(estate, &G)){
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  334:		supplyUnchanged = 0;
    #####:  335:		printf("FAILED For Estate Count: Expected: %d Actual:%d \n",supplyCount(estate,&copyG), supplyCount(estate, &G) );
call    0 never executed
call    1 never executed
call    2 never executed
        -:  336:	}
        5:  337:	if(supplyCount(duchy, &copyG) != supplyCount(duchy, &G)){
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  338:		supplyUnchanged = 0;
    #####:  339:		printf("FAILED For Duchy Count: Expected: %d Actual:%d \n",supplyCount(duchy,&copyG), supplyCount(duchy, &G) );
call    0 never executed
call    1 never executed
call    2 never executed
        -:  340:	}	
        5:  341:	if(supplyCount(province, &copyG) != supplyCount(province, &G)){
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  342:		supplyUnchanged = 0;
    #####:  343:		printf("FAILED For Province Count: Expected: %d Actual:%d \n",supplyCount(province,&copyG), supplyCount(province, &G) );
call    0 never executed
call    1 never executed
call    2 never executed
        -:  344:	}
        -:  345:	
        -:  346:
        5:  347:	if(supplyUnchanged == 1){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        5:  348:		printf("PASSED\n");
call    0 returned 100%
        -:  349:	}
        -:  350:
        -:  351:
        5:  352:	printf("Game State Remains Unchanged (Supply Count for Coin Cards is Unchanged): ");
call    0 returned 100%
        -:  353:	//varible to track supply is unchanged
        5:  354:	supplyUnchanged = 1;
        -:  355:
        -:  356:	//Check count of all coins
        5:  357:	if(supplyCount(copper, &copyG) != supplyCount(copper, &G)){
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  358:		supplyUnchanged = 0;
    #####:  359:		printf("FAILED For copper Count: Expected: %d Actual:%d \n",supplyCount(copper,&copyG), supplyCount(copper, &G) );
call    0 never executed
call    1 never executed
call    2 never executed
        -:  360:	}
        5:  361:	if(supplyCount(silver, &copyG) != supplyCount(silver, &G)){
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  362:		supplyUnchanged = 0;
    #####:  363:		printf("FAILED For silver Count: Expected: %d Actual:%d \n",supplyCount(silver,&copyG), supplyCount(silver, &G) );
call    0 never executed
call    1 never executed
call    2 never executed
        -:  364:	}
        5:  365:	if(supplyCount(gold, &copyG) != supplyCount(gold, &G)){
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  366:		supplyUnchanged = 0;
    #####:  367:		printf("FAILED For gold Count: Expected: %d Actual:%d \n",supplyCount(gold,&copyG), supplyCount(gold, &G) );
call    0 never executed
call    1 never executed
call    2 never executed
        -:  368:	}
        -:  369:
        5:  370:	if(supplyUnchanged == 1){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        5:  371:		printf("PASSED\n");
call    0 returned 100%
        -:  372:	}
        -:  373:
        5:  374:	printf("Game State Remains Unchanged (Supply Count for All Kingdom Cards is Unchanged): ");
call    0 returned 100%
        -:  375:	//varible to track supply is unchanged
        5:  376:	supplyUnchanged = 1;
        -:  377:
        -:  378:	//Check each kingdom card
       55:  379:	for(int i = 0; i < 10; i++){
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       50:  380:		if(supplyCount(kingdomCards[i], &copyG) != supplyCount(kingdomCards[i], &G)){
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  381:			supplyUnchanged = 0;
    #####:  382:			printf("FAILED For kingdom Card %d Count: Expected: %d Actual:%d \n",i ,supplyCount(kingdomCards[i],&copyG), supplyCount(kingdomCards[i], &G) );
call    0 never executed
call    1 never executed
call    2 never executed
        -:  383:		}
        -:  384:	}
        -:  385:
        5:  386:	if(supplyUnchanged == 1){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        5:  387:		printf("PASSED\n\n");
call    0 returned 100%
        -:  388:	}
        -:  389:	
        -:  390:}
        -:  391:
        -:  392:	//Finished Result
        1:  393:	if(overall == 0){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  394:		printf(">>>Testing of adventurer FAILED <<<\n");
call    0 returned 100%
        -:  395:	}
        -:  396:
        -:  397:	else{
    #####:  398:		printf(">>>Testing of adventurer PASSED <<<\n");
call    0 never executed
        -:  399:	}
        -:  400:
        1:  401:	return 0;
        -:  402:}
        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <string.h>
        -:    5:#include <stdio.h>
        -:    6:
function main called 1 returned 100% blocks executed 65%
        1:    7:int main()
        -:    8:{
        -:    9:	//Set variables to intialize game
        -:   10:	//Referenced provided code samples
        1:   11:	int numPlayers = 2 ;
        1:   12:	int kingdomCards[10] = {adventurer, council_room, feast, gardens, mine
        -:   13:               , remodel, smithy, village, baron, great_hall};
        1:   14:	int randomSeed = 1000 ;
        -:   15:	struct gameState G;
        -:   16:	struct gameState copyG;
        1:   17:	int testPlayer = 0;
        1:   18:	int otherPlayer = 1;
        1:   19:	int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        1:   20:	int newCards = 1;
        1:   21:	int discarded = 1;
        1:   22:	int addActions = 2;
        -:   23:
        -:   24:	//Track overall pass or fail
        1:   25:	int overall = 1;
        -:   26:
        -:   27:	//Intialize a game
        1:   28:	initializeGame(numPlayers,kingdomCards,randomSeed,&G);
call    0 returned 100%
        -:   29:
        -:   30:	//Copy current game state to use later to make sure parts of game state changes correctly
        1:   31:	memcpy(&copyG, &G, sizeof(struct gameState));
        -:   32:
        1:   33:	printf("\n>>>Testing Card: village <<<\n");
call    0 returned 100%
        -:   34:
        1:   35:	printf("\n......Running Tests......\n");
call    0 returned 100%
        -:   36:
        -:   37:	//Run function cardEffect using village
        1:   38:	cardEffect(village,choice1,choice2,choice3,&G,handpos,&bonus);
call    0 returned 100%
        -:   39:
        1:   40:	printf("Draw 1 Card Added to Hand (Test Player's Hand Increased Correctly) : ");
call    0 returned 100%
        -:   41:	//Hand should have 1 more cards than before village was used
        1:   42:	if(G.handCount[testPlayer] == (copyG.handCount[testPlayer] + newCards)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   43:		printf("PASSED \n");
call    0 never executed
        -:   44:	}
        -:   45:	else{
        1:   46:		printf("FAILED - Expected Hand Count: %d , Actual: %d \n",(copyG.handCount[testPlayer] + newCards), G.handCount[testPlayer] );
call    0 returned 100%
        1:   47:		overall = 0;
        -:   48:	}
        -:   49:
        -:   50:
        1:   51:	printf("Draw 1 Card Added to Hand (Test Player's Deck Decreased Correctly) : ");
call    0 returned 100%
        -:   52:	//Deck should have 1 less card
        1:   53:	if(G.deckCount[testPlayer] == (copyG.deckCount[testPlayer] - newCards)){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   54:		printf("PASSED \n");
call    0 returned 100%
        -:   55:	}
        -:   56:	else{
    #####:   57:		printf("FAILED - Expected Deck Count: %d , Actual: %d \n",(copyG.deckCount[testPlayer] - newCards), G.deckCount[testPlayer] );
call    0 never executed
    #####:   58:		overall = 0;
        -:   59:	}
        -:   60:
        -:   61:
        1:   62:	printf("Add 2 Actions (Test Player's Number of Actions Increased Correctly) : ");
call    0 returned 100%
        -:   63:	//Hand should have 2 more actions than before village was used
        1:   64:	if(G.numActions == (copyG.numActions + addActions)){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   65:		printf("PASSED \n");
call    0 returned 100%
        -:   66:	}
        -:   67:	else{
    #####:   68:		printf("FAILED - Expected Hand Count: %d , Actual: %d \n",(copyG.numActions + addActions), G.handCount[testPlayer] );
call    0 never executed
    #####:   69:		overall = 0;
        -:   70:	}
        -:   71:
        1:   72:		printf("Test Player Discarded village (Discard Count is Increased Correctly): ");
call    0 returned 100%
        -:   73:	//Discard count should be 1
        1:   74:	if(G.discardCount[testPlayer] == discarded){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   75:		printf("PASSED \n");
call    0 never executed
        -:   76:	}
        -:   77:	else{
        1:   78:		printf("FAILED - Expected Discard Count: %d , Actual: %d \n", discarded, G.discardCount[testPlayer]) ;
call    0 returned 100%
        1:   79:		overall = 0;
        -:   80:	}
        -:   81:
        -:   82:
        1:   83:	printf("Test Player Discarded village (Discard Pile Contains village): ");
call    0 returned 100%
        -:   84:	//Varible for the containing village
        1:   85:	int contains = 0;
        -:   86:
        -:   87:	//Loop through player discard pile and check for village
        1:   88:	for(int i = 0; i < G.discardCount[testPlayer]; i++){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:   89:		if(G.discard[testPlayer][i] == 14){
branch  0 never executed
branch  1 never executed
        -:   90:			//Card is in discard, set true
    #####:   91:			contains = 1;
        -:   92:		}
        -:   93:	}
        -:   94:	
        1:   95:	if(contains == 0){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   96:		printf("FAILED \n");
call    0 returned 100%
        1:   97:		overall = 0;
        -:   98:	}
        -:   99:	else{
    #####:  100:		printf("PASSED \n");
call    0 never executed
        -:  101:	}
        -:  102:
        -:  103:	//Check the game state is unaffected by village by compare previous game state to current game state
        -:  104:	
        1:  105:	printf("Game State Remains Unchanged (Other Player's Hand Count is Unchanged): ");
call    0 returned 100%
        -:  106:	//check other player's hand count is the same as before village was used
        1:  107:	if(copyG.handCount[otherPlayer] == G.handCount[otherPlayer]){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  108:		printf("PASSED \n");
call    0 returned 100%
        -:  109:	}
        -:  110:	else{
    #####:  111:		printf("FAILED - Expected Hand Count: %d , Actual: %d \n", copyG.handCount[otherPlayer], G.handCount[otherPlayer]) ;
call    0 never executed
    #####:  112:		overall = 0;
        -:  113:	}
        -:  114:
        -:  115:
        1:  116:	printf("Game State Remains Unchanged (Other Player's Deck Count is Unchanged): ");
call    0 returned 100%
        -:  117:	//check other player's deck count is the same as before village was used
        1:  118:	if(copyG.deckCount[otherPlayer] == G.deckCount[otherPlayer]){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  119:		printf("PASSED \n");
call    0 returned 100%
        -:  120:	}
        -:  121:	else{
    #####:  122:		printf("FAILED - Expected Deck Count: %d , Actual: %d \n", copyG.deckCount[otherPlayer], G.deckCount[otherPlayer]) ;
call    0 never executed
    #####:  123:		overall = 0;
        -:  124:	}
        -:  125:
        -:  126:
        1:  127:	printf("Game State Remains Unchanged (Other Player's Discard Count is Unchanged): ");
call    0 returned 100%
        -:  128:	//check other player's discard count is the same as before village was used
        1:  129:	if(copyG.discardCount[otherPlayer] == G.discardCount[otherPlayer]){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  130:		printf("PASSED \n");
call    0 returned 100%
        -:  131:	}
        -:  132:	else{
    #####:  133:		printf("FAILED - Expected Discard Count: %d , Actual: %d \n", copyG.discardCount[otherPlayer], G.discardCount[otherPlayer]) ;
call    0 never executed
    #####:  134:		overall = 0;
        -:  135:	}
        -:  136:
        -:  137:
        1:  138:	printf("Game State Remains Unchanged (Supply Count for Victory Cards is Unchanged): ");
call    0 returned 100%
        -:  139:	//varible to track supply is unchanged
        1:  140:	int supplyUnchanged = 1;
        -:  141:
        -:  142:	//Check count of all victory cards
        1:  143:	if(supplyCount(estate, &copyG) != supplyCount(estate, &G)){
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  144:		supplyUnchanged = 0;
    #####:  145:		printf("FAILED For Estate Count: Expected: %d Actual:%d \n",supplyCount(estate,&copyG), supplyCount(estate, &G) );
call    0 never executed
call    1 never executed
call    2 never executed
        -:  146:	}
        1:  147:	if(supplyCount(duchy, &copyG) != supplyCount(duchy, &G)){
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  148:		supplyUnchanged = 0;
    #####:  149:		printf("FAILED For Duchy Count: Expected: %d Actual:%d \n",supplyCount(duchy,&copyG), supplyCount(duchy, &G) );
call    0 never executed
call    1 never executed
call    2 never executed
        -:  150:	}	
        1:  151:	if(supplyCount(province, &copyG) != supplyCount(province, &G)){
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  152:		supplyUnchanged = 0;
    #####:  153:		printf("FAILED For Province Count: Expected: %d Actual:%d \n",supplyCount(province,&copyG), supplyCount(province, &G) );
call    0 never executed
call    1 never executed
call    2 never executed
        -:  154:	}
        -:  155:	
        -:  156:
        1:  157:	if(supplyUnchanged == 1){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  158:		printf("PASSED\n");
call    0 returned 100%
        -:  159:	}
        -:  160:
        -:  161:
        1:  162:	printf("Game State Remains Unchanged (Supply Count for Coin Cards is Unchanged): ");
call    0 returned 100%
        -:  163:	//varible to track supply is unchanged
        1:  164:	supplyUnchanged = 1;
        -:  165:
        -:  166:	//Check count of all coins
        1:  167:	if(supplyCount(copper, &copyG) != supplyCount(copper, &G)){
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  168:		supplyUnchanged = 0;
    #####:  169:		printf("FAILED For copper Count: Expected: %d Actual:%d \n",supplyCount(copper,&copyG), supplyCount(copper, &G) );
call    0 never executed
call    1 never executed
call    2 never executed
        -:  170:	}
        1:  171:	if(supplyCount(silver, &copyG) != supplyCount(silver, &G)){
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  172:		supplyUnchanged = 0;
    #####:  173:		printf("FAILED For silver Count: Expected: %d Actual:%d \n",supplyCount(silver,&copyG), supplyCount(silver, &G) );
call    0 never executed
call    1 never executed
call    2 never executed
        -:  174:	}
        1:  175:	if(supplyCount(gold, &copyG) != supplyCount(gold, &G)){
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  176:		supplyUnchanged = 0;
    #####:  177:		printf("FAILED For gold Count: Expected: %d Actual:%d \n",supplyCount(gold,&copyG), supplyCount(gold, &G) );
call    0 never executed
call    1 never executed
call    2 never executed
        -:  178:	}
        -:  179:
        1:  180:	if(supplyUnchanged == 1){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  181:		printf("PASSED\n");
call    0 returned 100%
        -:  182:	}
        -:  183:
        1:  184:	printf("Game State Remains Unchanged (Supply Count for All Kingdom Cards is Unchanged): ");
call    0 returned 100%
        -:  185:	//varible to track supply is unchanged
        1:  186:	supplyUnchanged = 1;
        -:  187:
        -:  188:	//Check each kingdom card
       11:  189:	for(int i = 0; i < 10; i++){
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       10:  190:		if(supplyCount(kingdomCards[i], &copyG) != supplyCount(kingdomCards[i], &G)){
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  191:			supplyUnchanged = 0;
    #####:  192:			printf("FAILED For kingdom Card %d Count: Expected: %d Actual:%d \n",i ,supplyCount(kingdomCards[i],&copyG), supplyCount(kingdomCards[i], &G) );
call    0 never executed
call    1 never executed
call    2 never executed
        -:  193:		}
        -:  194:	}
        -:  195:
        1:  196:	if(supplyUnchanged == 1){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  197:		printf("PASSED\n\n");
call    0 returned 100%
        -:  198:	}	
        -:  199:
        -:  200:	//Finished Result
        1:  201:	if(overall == 0){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  202:		printf(">>>Testing of village FAILED <<<\n");
call    0 returned 100%
        -:  203:	}
        -:  204:
        -:  205:	else{
    #####:  206:		printf(">>>Testing of village PASSED <<<\n");
call    0 never executed
        -:  207:	}
        -:  208:
        1:  209:	return 0;
        -:  210:}
        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <string.h>
        -:    5:#include <stdio.h>
        -:    6:
function main called 1 returned 100% blocks executed 65%
        1:    7:int main()
        -:    8:{
        -:    9:	//Set variables to intialize game
        -:   10:	//Referenced provided code samples
        1:   11:	int numPlayers = 2 ;
        1:   12:	int kingdomCards[10] = {adventurer, council_room, feast, gardens, mine
        -:   13:               , remodel, smithy, village, baron, great_hall};
        1:   14:	int randomSeed = 1000 ;
        -:   15:	struct gameState G;
        -:   16:	struct gameState copyG;
        1:   17:	int testPlayer = 0;
        1:   18:	int otherPlayer = 1;
        1:   19:	int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        1:   20:	int newCards = 1;
        1:   21:	int discarded = 1;
        1:   22:	int addActions = 1;
        -:   23:
        -:   24:	//Track overall pass or fail
        1:   25:	int overall = 1;
        -:   26:
        -:   27:	//Intialize a game
        1:   28:	initializeGame(numPlayers,kingdomCards,randomSeed,&G);
call    0 returned 100%
        -:   29:
        -:   30:	//Copy current game state to use later to make sure parts of game state changes correctly
        1:   31:	memcpy(&copyG, &G, sizeof(struct gameState));
        -:   32:
        1:   33:	printf("\n>>>Testing Card: great_hall <<<\n");
call    0 returned 100%
        -:   34:
        1:   35:	printf("\n......Running Tests......\n");
call    0 returned 100%
        -:   36:
        -:   37:	//Run function cardEffect using great_hall
        1:   38:	cardEffect(great_hall,choice1,choice2,choice3,&G,handpos,&bonus);
call    0 returned 100%
        -:   39:
        1:   40:	printf("Draw 1 Card Added to Hand (Test Player's Hand Increased Correctly) : ");
call    0 returned 100%
        -:   41:	//Hand should have 1 more cards than before great_hall was used
        1:   42:	if(G.handCount[testPlayer] == (copyG.handCount[testPlayer] + newCards)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   43:		printf("PASSED \n");
call    0 never executed
        -:   44:	}
        -:   45:	else{
        1:   46:		printf("FAILED - Expected Hand Count: %d , Actual: %d \n",(copyG.handCount[testPlayer] + newCards), G.handCount[testPlayer] );
call    0 returned 100%
        1:   47:		overall = 0;
        -:   48:	}
        -:   49:
        -:   50:
        1:   51:	printf("Draw 1 Card Added to Hand (Test Player's Deck Decreased Correctly) : ");
call    0 returned 100%
        -:   52:	//Deck should have 1 less card
        1:   53:	if(G.deckCount[testPlayer] == (copyG.deckCount[testPlayer] - newCards)){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   54:		printf("PASSED \n");
call    0 returned 100%
        -:   55:	}
        -:   56:	else{
    #####:   57:		printf("FAILED - Expected Deck Count: %d , Actual: %d \n",(copyG.deckCount[testPlayer] - newCards), G.deckCount[testPlayer] );
call    0 never executed
    #####:   58:		overall = 0;
        -:   59:	}
        -:   60:
        -:   61:
        1:   62:	printf("Add 1 Action (Test Player's Number of Actions Increased Correctly) : ");
call    0 returned 100%
        -:   63:	//Hand should have 1 more actions than before great_hall was used
        1:   64:	if(G.numActions == (copyG.numActions + addActions)){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   65:		printf("PASSED \n");
call    0 returned 100%
        -:   66:	}
        -:   67:	else{
    #####:   68:		printf("FAILED - Expected Hand Count: %d , Actual: %d \n",(copyG.numActions + addActions), G.handCount[testPlayer] );
call    0 never executed
    #####:   69:		overall = 0;
        -:   70:	}
        -:   71:
        1:   72:	printf("Test Player Discarded great_hall (Discard Count is Increased Correctly): ");
call    0 returned 100%
        -:   73:	//Discard count should be 1
        1:   74:	if(G.discardCount[testPlayer] == discarded){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   75:		printf("PASSED \n");
call    0 never executed
        -:   76:	}
        -:   77:	else{
        1:   78:		printf("FAILED - Expected Discard Count: %d , Actual: %d \n", discarded, G.discardCount[testPlayer]) ;
call    0 returned 100%
        1:   79:		overall = 0;
        -:   80:	}
        -:   81:
        -:   82:
        1:   83:	printf("Test Player Discarded great_hall (Discard Pile Contains great_hall): ");
call    0 returned 100%
        -:   84:	//Varible for the containing great_hall
        1:   85:	int contains = 0;
        -:   86:
        -:   87:	//Loop through player discard pile and check for great_hall
        1:   88:	for(int i = 0; i < G.discardCount[testPlayer]; i++){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:   89:		if(G.discard[testPlayer][i] == 14){
branch  0 never executed
branch  1 never executed
        -:   90:			//Card is in discard, set true
    #####:   91:			contains = 1;
        -:   92:		}
        -:   93:	}
        -:   94:	
        1:   95:	if(contains == 0){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   96:		printf("FAILED \n");
call    0 returned 100%
        1:   97:		overall = 0;
        -:   98:	}
        -:   99:	else{
    #####:  100:		printf("PASSED \n");
call    0 never executed
        -:  101:	}
        -:  102:
        -:  103:	//Check the game state is unaffected by great_hall by compare previous game state to current game state
        -:  104:	
        1:  105:	printf("Game State Remains Unchanged (Other Player's Hand Count is Unchanged): ");
call    0 returned 100%
        -:  106:	//check other player's hand count is the same as before great_hall was used
        1:  107:	if(copyG.handCount[otherPlayer] == G.handCount[otherPlayer]){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  108:		printf("PASSED \n");
call    0 returned 100%
        -:  109:	}
        -:  110:	else{
    #####:  111:		printf("FAILED - Expected Hand Count: %d , Actual: %d \n", copyG.handCount[otherPlayer], G.handCount[otherPlayer]) ;
call    0 never executed
    #####:  112:		overall = 0;
        -:  113:	}
        -:  114:
        -:  115:
        1:  116:	printf("Game State Remains Unchanged (Other Player's Deck Count is Unchanged): ");
call    0 returned 100%
        -:  117:	//check other player's deck count is the same as before great_hall was used
        1:  118:	if(copyG.deckCount[otherPlayer] == G.deckCount[otherPlayer]){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  119:		printf("PASSED \n");
call    0 returned 100%
        -:  120:	}
        -:  121:	else{
    #####:  122:		printf("FAILED - Expected Deck Count: %d , Actual: %d \n", copyG.deckCount[otherPlayer], G.deckCount[otherPlayer]) ;
call    0 never executed
    #####:  123:		overall = 0;
        -:  124:	}
        -:  125:
        -:  126:
        1:  127:	printf("Game State Remains Unchanged (Other Player's Discard Count is Unchanged): ");
call    0 returned 100%
        -:  128:	//check other player's discard count is the same as before great_hall was used
        1:  129:	if(copyG.discardCount[otherPlayer] == G.discardCount[otherPlayer]){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  130:		printf("PASSED \n");
call    0 returned 100%
        -:  131:	}
        -:  132:	else{
    #####:  133:		printf("FAILED - Expected Discard Count: %d , Actual: %d \n", copyG.discardCount[otherPlayer], G.discardCount[otherPlayer]) ;
call    0 never executed
    #####:  134:		overall = 0;
        -:  135:	}
        -:  136:
        -:  137:
        1:  138:	printf("Game State Remains Unchanged (Supply Count for Victory Cards is Unchanged): ");
call    0 returned 100%
        -:  139:	//varible to track supply is unchanged
        1:  140:	int supplyUnchanged = 1;
        -:  141:
        -:  142:	//Check count of all victory cards
        1:  143:	if(supplyCount(estate, &copyG) != supplyCount(estate, &G)){
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  144:		supplyUnchanged = 0;
    #####:  145:		printf("FAILED For Estate Count: Expected: %d Actual:%d \n",supplyCount(estate,&copyG), supplyCount(estate, &G) );
call    0 never executed
call    1 never executed
call    2 never executed
        -:  146:	}
        1:  147:	if(supplyCount(duchy, &copyG) != supplyCount(duchy, &G)){
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  148:		supplyUnchanged = 0;
    #####:  149:		printf("FAILED For Duchy Count: Expected: %d Actual:%d \n",supplyCount(duchy,&copyG), supplyCount(duchy, &G) );
call    0 never executed
call    1 never executed
call    2 never executed
        -:  150:	}	
        1:  151:	if(supplyCount(province, &copyG) != supplyCount(province, &G)){
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  152:		supplyUnchanged = 0;
    #####:  153:		printf("FAILED For Province Count: Expected: %d Actual:%d \n",supplyCount(province,&copyG), supplyCount(province, &G) );
call    0 never executed
call    1 never executed
call    2 never executed
        -:  154:	}
        -:  155:	
        -:  156:
        1:  157:	if(supplyUnchanged == 1){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  158:		printf("PASSED\n");
call    0 returned 100%
        -:  159:	}
        -:  160:
        -:  161:
        1:  162:	printf("Game State Remains Unchanged (Supply Count for Coin Cards is Unchanged): ");
call    0 returned 100%
        -:  163:	//varible to track supply is unchanged
        1:  164:	supplyUnchanged = 1;
        -:  165:
        -:  166:	//Check count of all coins
        1:  167:	if(supplyCount(copper, &copyG) != supplyCount(copper, &G)){
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  168:		supplyUnchanged = 0;
    #####:  169:		printf("FAILED For copper Count: Expected: %d Actual:%d \n",supplyCount(copper,&copyG), supplyCount(copper, &G) );
call    0 never executed
call    1 never executed
call    2 never executed
        -:  170:	}
        1:  171:	if(supplyCount(silver, &copyG) != supplyCount(silver, &G)){
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  172:		supplyUnchanged = 0;
    #####:  173:		printf("FAILED For silver Count: Expected: %d Actual:%d \n",supplyCount(silver,&copyG), supplyCount(silver, &G) );
call    0 never executed
call    1 never executed
call    2 never executed
        -:  174:	}
        1:  175:	if(supplyCount(gold, &copyG) != supplyCount(gold, &G)){
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  176:		supplyUnchanged = 0;
    #####:  177:		printf("FAILED For gold Count: Expected: %d Actual:%d \n",supplyCount(gold,&copyG), supplyCount(gold, &G) );
call    0 never executed
call    1 never executed
call    2 never executed
        -:  178:	}
        -:  179:
        1:  180:	if(supplyUnchanged == 1){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  181:		printf("PASSED\n");
call    0 returned 100%
        -:  182:	}
        -:  183:
        1:  184:	printf("Game State Remains Unchanged (Supply Count for All Kingdom Cards is Unchanged): ");
call    0 returned 100%
        -:  185:	//varible to track supply is unchanged
        1:  186:	supplyUnchanged = 1;
        -:  187:
        -:  188:	//Check each kingdom card
       11:  189:	for(int i = 0; i < 10; i++){
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       10:  190:		if(supplyCount(kingdomCards[i], &copyG) != supplyCount(kingdomCards[i], &G)){
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  191:			supplyUnchanged = 0;
    #####:  192:			printf("FAILED For kingdom Card %d Count: Expected: %d Actual:%d \n",i ,supplyCount(kingdomCards[i],&copyG), supplyCount(kingdomCards[i], &G) );
call    0 never executed
call    1 never executed
call    2 never executed
        -:  193:		}
        -:  194:	}
        -:  195:
        1:  196:	if(supplyUnchanged == 1){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  197:		printf("PASSED\n\n");
call    0 returned 100%
        -:  198:	}	
        -:  199:
        -:  200:	//Finished Result
        1:  201:	if(overall == 0){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  202:		printf(">>>Testing of great_hall FAILED <<<\n");
call    0 returned 100%
        -:  203:	}
        -:  204:
        -:  205:	else{
    #####:  206:		printf(">>>Testing of great_hall PASSED <<<\n");
call    0 never executed
        -:  207:	}
        -:  208:
        1:  209:	return 0;
        -:  210:}
