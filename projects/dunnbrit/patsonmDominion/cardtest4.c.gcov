        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <string.h>
        -:    5:#include <stdio.h>
        -:    6:
function main called 1 returned 100% blocks executed 66%
        1:    7:int main()
        -:    8:{
        -:    9:	//Set variables to intialize game
        -:   10:	//Referenced provided code samples
        1:   11:	int numPlayers = 2 ;
        1:   12:	int kingdomCards[10] = {adventurer, council_room, feast, gardens, mine
        -:   13:               , remodel, smithy, village, baron, great_hall};
        1:   14:	int randomSeed = 1000 ;
        -:   15:	struct gameState G;
        -:   16:	struct gameState copyG;
        1:   17:	int testPlayer = 0;
        1:   18:	int otherPlayer = 1;
        1:   19:	int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        1:   20:	int newCards = 1;
        1:   21:	int discarded = 1;
        1:   22:	int addActions = 1;
        -:   23:
        -:   24:	//Track overall pass or fail
        1:   25:	int overall = 1;
        -:   26:
        -:   27:	//Intialize a game
        1:   28:	initializeGame(numPlayers,kingdomCards,randomSeed,&G);
call    0 returned 100%
        -:   29:
        -:   30:	//Copy current game state to use later to make sure parts of game state changes correctly
        1:   31:	memcpy(&copyG, &G, sizeof(struct gameState));
        -:   32:
        1:   33:	printf("\n>>>Testing Card: great_hall <<<\n");
call    0 returned 100%
        -:   34:
        1:   35:	printf("\n......Running Tests......\n");
call    0 returned 100%
        -:   36:
        -:   37:	//Run function cardEffect using great_hall
        1:   38:	cardEffect(great_hall,choice1,choice2,choice3,&G,handpos,&bonus);
call    0 returned 100%
        -:   39:
        1:   40:	printf("Draw 1 Card Added to Hand (Test Player's Hand Increased Correctly) : ");
call    0 returned 100%
        -:   41:	//Hand should have 1 more cards than before great_hall was used
        1:   42:	if(G.handCount[testPlayer] == (copyG.handCount[testPlayer] + newCards)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   43:		printf("PASSED \n");
call    0 never executed
        -:   44:	}
        -:   45:	else{
        1:   46:		printf("FAILED - Expected Hand Count: %d , Actual: %d \n",(copyG.handCount[testPlayer] + newCards), G.handCount[testPlayer] );
call    0 returned 100%
        1:   47:		overall = 0;
        -:   48:	}
        -:   49:
        -:   50:
        1:   51:	printf("Draw 1 Card Added to Hand (Test Player's Deck Decreased Correctly) : ");
call    0 returned 100%
        -:   52:	//Deck should have 1 less card
        1:   53:	if(G.deckCount[testPlayer] == (copyG.deckCount[testPlayer] - newCards)){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   54:		printf("PASSED \n");
call    0 returned 100%
        -:   55:	}
        -:   56:	else{
    #####:   57:		printf("FAILED - Expected Deck Count: %d , Actual: %d \n",(copyG.deckCount[testPlayer] - newCards), G.deckCount[testPlayer] );
call    0 never executed
    #####:   58:		overall = 0;
        -:   59:	}
        -:   60:
        -:   61:
        1:   62:	printf("Add 1 Action (Test Player's Number of Actions Increased Correctly) : ");
call    0 returned 100%
        -:   63:	//Hand should have 1 more actions than before great_hall was used
        1:   64:	if(G.numActions == (copyG.numActions + addActions)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   65:		printf("PASSED \n");
call    0 never executed
        -:   66:	}
        -:   67:	else{
        1:   68:		printf("FAILED - Expected Hand Count: %d , Actual: %d \n",(copyG.numActions + addActions), G.handCount[testPlayer] );
call    0 returned 100%
        1:   69:		overall = 0;
        -:   70:	}
        -:   71:
        1:   72:	printf("Test Player Discarded great_hall (Discard Count is Increased Correctly): ");
call    0 returned 100%
        -:   73:	//Discard count should be 1
        1:   74:	if(G.discardCount[testPlayer] == discarded){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   75:		printf("PASSED \n");
call    0 never executed
        -:   76:	}
        -:   77:	else{
        1:   78:		printf("FAILED - Expected Discard Count: %d , Actual: %d \n", discarded, G.discardCount[testPlayer]) ;
call    0 returned 100%
        1:   79:		overall = 0;
        -:   80:	}
        -:   81:
        -:   82:
        1:   83:	printf("Test Player Discarded great_hall (Discard Pile Contains great_hall): ");
call    0 returned 100%
        -:   84:	//Varible for the containing great_hall
        1:   85:	int contains = 0;
        -:   86:
        -:   87:	//Loop through player discard pile and check for great_hall
        1:   88:	for(int i = 0; i < G.discardCount[testPlayer]; i++){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:   89:		if(G.discard[testPlayer][i] == 14){
branch  0 never executed
branch  1 never executed
        -:   90:			//Card is in discard, set true
    #####:   91:			contains = 1;
        -:   92:		}
        -:   93:	}
        -:   94:	
        1:   95:	if(contains == 0){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   96:		printf("FAILED \n");
call    0 returned 100%
        1:   97:		overall = 0;
        -:   98:	}
        -:   99:	else{
    #####:  100:		printf("PASSED \n");
call    0 never executed
        -:  101:	}
        -:  102:
        -:  103:	//Check the game state is unaffected by great_hall by compare previous game state to current game state
        -:  104:	
        1:  105:	printf("Game State Remains Unchanged (Other Player's Hand Count is Unchanged): ");
call    0 returned 100%
        -:  106:	//check other player's hand count is the same as before great_hall was used
        1:  107:	if(copyG.handCount[otherPlayer] == G.handCount[otherPlayer]){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  108:		printf("PASSED \n");
call    0 returned 100%
        -:  109:	}
        -:  110:	else{
    #####:  111:		printf("FAILED - Expected Hand Count: %d , Actual: %d \n", copyG.handCount[otherPlayer], G.handCount[otherPlayer]) ;
call    0 never executed
    #####:  112:		overall = 0;
        -:  113:	}
        -:  114:
        -:  115:
        1:  116:	printf("Game State Remains Unchanged (Other Player's Deck Count is Unchanged): ");
call    0 returned 100%
        -:  117:	//check other player's deck count is the same as before great_hall was used
        1:  118:	if(copyG.deckCount[otherPlayer] == G.deckCount[otherPlayer]){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  119:		printf("PASSED \n");
call    0 returned 100%
        -:  120:	}
        -:  121:	else{
    #####:  122:		printf("FAILED - Expected Deck Count: %d , Actual: %d \n", copyG.deckCount[otherPlayer], G.deckCount[otherPlayer]) ;
call    0 never executed
    #####:  123:		overall = 0;
        -:  124:	}
        -:  125:
        -:  126:
        1:  127:	printf("Game State Remains Unchanged (Other Player's Discard Count is Unchanged): ");
call    0 returned 100%
        -:  128:	//check other player's discard count is the same as before great_hall was used
        1:  129:	if(copyG.discardCount[otherPlayer] == G.discardCount[otherPlayer]){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  130:		printf("PASSED \n");
call    0 returned 100%
        -:  131:	}
        -:  132:	else{
    #####:  133:		printf("FAILED - Expected Discard Count: %d , Actual: %d \n", copyG.discardCount[otherPlayer], G.discardCount[otherPlayer]) ;
call    0 never executed
    #####:  134:		overall = 0;
        -:  135:	}
        -:  136:
        -:  137:
        1:  138:	printf("Game State Remains Unchanged (Supply Count for Victory Cards is Unchanged): ");
call    0 returned 100%
        -:  139:	//varible to track supply is unchanged
        1:  140:	int supplyUnchanged = 1;
        -:  141:
        -:  142:	//Check count of all victory cards
        1:  143:	if(supplyCount(estate, &copyG) != supplyCount(estate, &G)){
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  144:		supplyUnchanged = 0;
    #####:  145:		printf("FAILED For Estate Count: Expected: %d Actual:%d \n",supplyCount(estate,&copyG), supplyCount(estate, &G) );
call    0 never executed
call    1 never executed
call    2 never executed
        -:  146:	}
        1:  147:	if(supplyCount(duchy, &copyG) != supplyCount(duchy, &G)){
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  148:		supplyUnchanged = 0;
    #####:  149:		printf("FAILED For Duchy Count: Expected: %d Actual:%d \n",supplyCount(duchy,&copyG), supplyCount(duchy, &G) );
call    0 never executed
call    1 never executed
call    2 never executed
        -:  150:	}	
        1:  151:	if(supplyCount(province, &copyG) != supplyCount(province, &G)){
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  152:		supplyUnchanged = 0;
    #####:  153:		printf("FAILED For Province Count: Expected: %d Actual:%d \n",supplyCount(province,&copyG), supplyCount(province, &G) );
call    0 never executed
call    1 never executed
call    2 never executed
        -:  154:	}
        -:  155:	
        -:  156:
        1:  157:	if(supplyUnchanged == 1){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  158:		printf("PASSED\n");
call    0 returned 100%
        -:  159:	}
        -:  160:
        -:  161:
        1:  162:	printf("Game State Remains Unchanged (Supply Count for Coin Cards is Unchanged): ");
call    0 returned 100%
        -:  163:	//varible to track supply is unchanged
        1:  164:	supplyUnchanged = 1;
        -:  165:
        -:  166:	//Check count of all coins
        1:  167:	if(supplyCount(copper, &copyG) != supplyCount(copper, &G)){
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  168:		supplyUnchanged = 0;
    #####:  169:		printf("FAILED For copper Count: Expected: %d Actual:%d \n",supplyCount(copper,&copyG), supplyCount(copper, &G) );
call    0 never executed
call    1 never executed
call    2 never executed
        -:  170:	}
        1:  171:	if(supplyCount(silver, &copyG) != supplyCount(silver, &G)){
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  172:		supplyUnchanged = 0;
    #####:  173:		printf("FAILED For silver Count: Expected: %d Actual:%d \n",supplyCount(silver,&copyG), supplyCount(silver, &G) );
call    0 never executed
call    1 never executed
call    2 never executed
        -:  174:	}
        1:  175:	if(supplyCount(gold, &copyG) != supplyCount(gold, &G)){
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  176:		supplyUnchanged = 0;
    #####:  177:		printf("FAILED For gold Count: Expected: %d Actual:%d \n",supplyCount(gold,&copyG), supplyCount(gold, &G) );
call    0 never executed
call    1 never executed
call    2 never executed
        -:  178:	}
        -:  179:
        1:  180:	if(supplyUnchanged == 1){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  181:		printf("PASSED\n");
call    0 returned 100%
        -:  182:	}
        -:  183:
        1:  184:	printf("Game State Remains Unchanged (Supply Count for All Kingdom Cards is Unchanged): ");
call    0 returned 100%
        -:  185:	//varible to track supply is unchanged
        1:  186:	supplyUnchanged = 1;
        -:  187:
        -:  188:	//Check each kingdom card
       11:  189:	for(int i = 0; i < 10; i++){
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       10:  190:		if(supplyCount(kingdomCards[i], &copyG) != supplyCount(kingdomCards[i], &G)){
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  191:			supplyUnchanged = 0;
    #####:  192:			printf("FAILED For kingdom Card %d Count: Expected: %d Actual:%d \n",i ,supplyCount(kingdomCards[i],&copyG), supplyCount(kingdomCards[i], &G) );
call    0 never executed
call    1 never executed
call    2 never executed
        -:  193:		}
        -:  194:	}
        -:  195:
        1:  196:	if(supplyUnchanged == 1){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  197:		printf("PASSED\n\n");
call    0 returned 100%
        -:  198:	}	
        -:  199:
        -:  200:	//Finished Result
        1:  201:	if(overall == 0){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  202:		printf(">>>Testing of great_hall FAILED <<<\n");
call    0 returned 100%
        -:  203:	}
        -:  204:
        -:  205:	else{
    #####:  206:		printf(">>>Testing of great_hall PASSED <<<\n");
call    0 never executed
        -:  207:	}
        -:  208:
        1:  209:	return 0;
        -:  210:}
