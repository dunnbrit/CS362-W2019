        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <string.h>
        -:    5:#include <stdio.h>
        -:    6:
function main called 1 returned 100% blocks executed 66%
        1:    7:int main()
        -:    8:{
        -:    9:	//Set variables to intialize game
        -:   10:	//Referenced provided code samples
        1:   11:	int numPlayers = 2 ;
        1:   12:	int kingdomCards[10] = {adventurer, council_room, feast, gardens, mine
        -:   13:               , remodel, smithy, village, baron, great_hall};
        1:   14:	int randomSeed = 1000 ;
        -:   15:	struct gameState G;
        -:   16:	struct gameState copyG;
        1:   17:	int testPlayer = 0;
        1:   18:	int otherPlayer = 1;
        1:   19:	int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        1:   20:	int newCards = 3;
        1:   21:	int discarded = 1;
        -:   22:
        -:   23:	//Track overall pass or fail
        1:   24:	int overall = 1;
        -:   25:
        -:   26:	//Intialize a game
        1:   27:	initializeGame(numPlayers,kingdomCards,randomSeed,&G);
call    0 returned 100%
        -:   28:
        -:   29:	//Copy current game state to use later to make sure parts of game state changes correctly
        1:   30:	memcpy(&copyG, &G, sizeof(struct gameState));
        -:   31:
        1:   32:	printf("\n>>>Testing Card: Smithy <<<\n");
call    0 returned 100%
        -:   33:
        1:   34:	printf("\n......Running Tests......\n");
call    0 returned 100%
        -:   35:
        -:   36:	//Run function cardEffect using smithy
        1:   37:	cardEffect(smithy,choice1,choice2,choice3,&G,handpos,&bonus);
call    0 returned 100%
        -:   38:
        1:   39:	printf("Draw 3 Cards Added to Hand (Test Player's Hand Increased Correctly) : ");
call    0 returned 100%
        -:   40:	//Hand should have 3 more cards than before smithy was used
        1:   41:	if(G.handCount[testPlayer] == (copyG.handCount[testPlayer] + newCards)){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   42:		printf("PASSED \n");
call    0 returned 100%
        -:   43:	}
        -:   44:	else{
    #####:   45:		printf("FAILED - Expected Hand Count: %d , Actual: %d \n",(copyG.handCount[testPlayer] + newCards), G.handCount[testPlayer] );
call    0 never executed
    #####:   46:		overall = 0;
        -:   47:	}
        -:   48:
        -:   49:
        1:   50:	printf("3 Cards Drawn from Player's Deck (Test Player's Deck Decreased Correctly): ");
call    0 returned 100%
        -:   51:	//Deck should have 3 less cards
        1:   52:	if(G.deckCount[testPlayer] == (copyG.deckCount[testPlayer] - newCards)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   53:		printf("PASSED \n");
call    0 never executed
        -:   54:	}
        -:   55:	else{
        1:   56:		printf("FAILED - Expected Deck Count: %d , Actual: %d \n",(copyG.deckCount[testPlayer] - newCards), G.deckCount[testPlayer] );
call    0 returned 100%
        1:   57:		overall = 0;
        -:   58:	}
        -:   59:
        -:   60:
        1:   61:	printf("3 Cards Drawn from Player's Deck (Test Player's Hand Includes Copper or Estate Only): ");
call    0 returned 100%
        -:   62:	//Varible for the correct cards
        1:   63:	int playerCards = 1;
        -:   64:
        -:   65:	//Loop through player hand and check for cards other than copper and estates
        9:   66:	for(int i = 0; i < G.handCount[testPlayer]; i++){
branch  0 taken 89%
branch  1 taken 11% (fallthrough)
        8:   67:		if(G.hand[testPlayer][i] != 1 && G.hand[testPlayer][i] != 4){
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   68:			//Card is not from player's deck set to false
    #####:   69:			playerCards = 0;
        -:   70:		}
        -:   71:	}
        -:   72:
        -:   73:	//If card is not from player's deck then failed test
        1:   74:	if(playerCards == 0){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   75:		printf("FAILED \n");
call    0 never executed
    #####:   76:		overall = 0;
        -:   77:	}
        -:   78:	else{
        1:   79:		printf("PASSED \n");
call    0 returned 100%
        -:   80:	}
        -:   81:
        -:   82:
        1:   83:	printf("Test Player Discarded Smithy (Discard Count is Increased Correctly): ");
call    0 returned 100%
        -:   84:	//Discard count should be 1
        1:   85:	if(G.discardCount[testPlayer] == discarded){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   86:		printf("PASSED \n");
call    0 never executed
        -:   87:	}
        -:   88:	else{
        1:   89:		printf("FAILED - Expected Discard Count: %d , Actual: %d \n", discarded, G.discardCount[testPlayer]) ;
call    0 returned 100%
        1:   90:		overall = 0;
        -:   91:	}
        -:   92:
        -:   93:
        1:   94:	printf("Test Player Discarded Smithy (Discard Pile Contains Smithy): ");
call    0 returned 100%
        -:   95:	//Varible for the containing smithy
        1:   96:	int contains = 0;
        -:   97:
        -:   98:	//Loop through player discard pile and check for smithy
        1:   99:	for(int i = 0; i < G.discardCount[testPlayer]; i++){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  100:		if(G.discard[testPlayer][i] == 13){
branch  0 never executed
branch  1 never executed
        -:  101:			//Card is in discard, set true
    #####:  102:			contains = 1;
        -:  103:		}
        -:  104:	}
        -:  105:	
        1:  106:	if(contains == 0){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  107:		printf("FAILED \n");
call    0 returned 100%
        1:  108:		overall = 0;
        -:  109:	}
        -:  110:	else{
    #####:  111:		printf("PASSED \n");
call    0 never executed
        -:  112:	}
        -:  113:
        -:  114:
        -:  115:	//Check the game state is unaffected by smithy by compare previous game state to current game state
        -:  116:	
        1:  117:	printf("Game State Remains Unchanged (Other Player's Hand Count is Unchanged): ");
call    0 returned 100%
        -:  118:	//check other player's hand count is the same as before smithy was used
        1:  119:	if(copyG.handCount[otherPlayer] == G.handCount[otherPlayer]){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  120:		printf("PASSED \n");
call    0 returned 100%
        -:  121:	}
        -:  122:	else{
    #####:  123:		printf("FAILED - Expected Hand Count: %d , Actual: %d \n", copyG.handCount[otherPlayer], G.handCount[otherPlayer]) ;
call    0 never executed
    #####:  124:		overall = 0;
        -:  125:	}
        -:  126:
        -:  127:
        1:  128:	printf("Game State Remains Unchanged (Other Player's Deck Count is Unchanged): ");
call    0 returned 100%
        -:  129:	//check other player's deck count is the same as before smithy was used
        1:  130:	if(copyG.deckCount[otherPlayer] == G.deckCount[otherPlayer]){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  131:		printf("PASSED \n");
call    0 returned 100%
        -:  132:	}
        -:  133:	else{
    #####:  134:		printf("FAILED - Expected Deck Count: %d , Actual: %d \n", copyG.deckCount[otherPlayer], G.deckCount[otherPlayer]) ;
call    0 never executed
    #####:  135:		overall = 0;
        -:  136:	}
        -:  137:
        -:  138:
        1:  139:	printf("Game State Remains Unchanged (Other Player's Discard Count is Unchanged): ");
call    0 returned 100%
        -:  140:	//check other player's discard count is the same as before smithy was used
        1:  141:	if(copyG.discardCount[otherPlayer] == G.discardCount[otherPlayer]){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  142:		printf("PASSED \n");
call    0 returned 100%
        -:  143:	}
        -:  144:	else{
    #####:  145:		printf("FAILED - Expected Discard Count: %d , Actual: %d \n", copyG.discardCount[otherPlayer], G.discardCount[otherPlayer]) ;
call    0 never executed
    #####:  146:		overall = 0;
        -:  147:	}
        -:  148:
        -:  149:
        1:  150:	printf("Game State Remains Unchanged (Supply Count for Victory Cards is Unchanged): ");
call    0 returned 100%
        -:  151:	//varible to track supply is unchanged
        1:  152:	int supplyUnchanged = 1;
        -:  153:
        -:  154:	//Check count of all victory cards
        1:  155:	if(supplyCount(estate, &copyG) != supplyCount(estate, &G)){
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  156:		supplyUnchanged = 0;
    #####:  157:		printf("FAILED For Estate Count: Expected: %d Actual:%d \n",supplyCount(estate,&copyG), supplyCount(estate, &G) );
call    0 never executed
call    1 never executed
call    2 never executed
        -:  158:	}
        1:  159:	if(supplyCount(duchy, &copyG) != supplyCount(duchy, &G)){
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  160:		supplyUnchanged = 0;
    #####:  161:		printf("FAILED For Duchy Count: Expected: %d Actual:%d \n",supplyCount(duchy,&copyG), supplyCount(duchy, &G) );
call    0 never executed
call    1 never executed
call    2 never executed
        -:  162:	}	
        1:  163:	if(supplyCount(province, &copyG) != supplyCount(province, &G)){
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  164:		supplyUnchanged = 0;
    #####:  165:		printf("FAILED For Province Count: Expected: %d Actual:%d \n",supplyCount(province,&copyG), supplyCount(province, &G) );
call    0 never executed
call    1 never executed
call    2 never executed
        -:  166:	}
        -:  167:	
        -:  168:
        1:  169:	if(supplyUnchanged == 1){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  170:		printf("PASSED\n");
call    0 returned 100%
        -:  171:	}
        -:  172:
        -:  173:
        1:  174:	printf("Game State Remains Unchanged (Supply Count for Coin Cards is Unchanged): ");
call    0 returned 100%
        -:  175:	//varible to track supply is unchanged
        1:  176:	supplyUnchanged = 1;
        -:  177:
        -:  178:	//Check count of all coins
        1:  179:	if(supplyCount(copper, &copyG) != supplyCount(copper, &G)){
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  180:		supplyUnchanged = 0;
    #####:  181:		printf("FAILED For copper Count: Expected: %d Actual:%d \n",supplyCount(copper,&copyG), supplyCount(copper, &G) );
call    0 never executed
call    1 never executed
call    2 never executed
        -:  182:	}
        1:  183:	if(supplyCount(silver, &copyG) != supplyCount(silver, &G)){
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  184:		supplyUnchanged = 0;
    #####:  185:		printf("FAILED For silver Count: Expected: %d Actual:%d \n",supplyCount(silver,&copyG), supplyCount(silver, &G) );
call    0 never executed
call    1 never executed
call    2 never executed
        -:  186:	}
        1:  187:	if(supplyCount(gold, &copyG) != supplyCount(gold, &G)){
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  188:		supplyUnchanged = 0;
    #####:  189:		printf("FAILED For gold Count: Expected: %d Actual:%d \n",supplyCount(gold,&copyG), supplyCount(gold, &G) );
call    0 never executed
call    1 never executed
call    2 never executed
        -:  190:	}
        -:  191:
        1:  192:	if(supplyUnchanged == 1){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  193:		printf("PASSED\n");
call    0 returned 100%
        -:  194:	}
        -:  195:
        1:  196:	printf("Game State Remains Unchanged (Supply Count for All Kingdom Cards is Unchanged): ");
call    0 returned 100%
        -:  197:	//varible to track supply is unchanged
        1:  198:	supplyUnchanged = 1;
        -:  199:
        -:  200:	//Check each kingdom card
       11:  201:	for(int i = 0; i < 10; i++){
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       10:  202:		if(supplyCount(kingdomCards[i], &copyG) != supplyCount(kingdomCards[i], &G)){
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  203:			supplyUnchanged = 0;
    #####:  204:			printf("FAILED For kingdom Card %d Count: Expected: %d Actual:%d \n",i ,supplyCount(kingdomCards[i],&copyG), supplyCount(kingdomCards[i], &G) );
call    0 never executed
call    1 never executed
call    2 never executed
        -:  205:		}
        -:  206:	}
        -:  207:
        1:  208:	if(supplyUnchanged == 1){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  209:		printf("PASSED\n\n");
call    0 returned 100%
        -:  210:	}	
        -:  211:
        -:  212:	//Finished Result
        1:  213:	if(overall == 0){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  214:		printf(">>>Testing of Smithy FAILED <<<\n");
call    0 returned 100%
        -:  215:	}
        -:  216:
        -:  217:	else{
    #####:  218:		printf(">>>Testing of Smithy PASSED <<<\n");
call    0 never executed
        -:  219:	}
        -:  220:
        1:  221:	return 0;
        -:  222:}
