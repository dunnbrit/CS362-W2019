        -:    0:Source:randomtestadventurer.c
        -:    0:Graph:randomtestadventurer.gcno
        -:    0:Data:randomtestadventurer.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <string.h>
        -:    5:#include <stdio.h>
        -:    6:
        1:    7:int main(){ 
        -:    8:
        -:    9:	//Setup variables
        1:   10:	int kingdomCards[10] = {adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, great_hall};
        -:   11:	struct gameState pre;
        1:   12:	int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        1:   13:	int testCard = adventurer;
        -:   14:
        -:   15:	//Random Variables
        -:   16:	int randomSeed;
        -:   17:	int players;
        -:   18:	int p;
        -:   19:	int treasures;
        -:   20:
        -:   21:	//Test Tracking
        1:   22:	int overall = 1;
        1:   23:	int handCountTest = 1;
        1:   24:	int zero = 0;
        1:   25:	int one = 0;
        1:   26:	int two = 0;
        1:   27:	int greater = 0;
        1:   28: 	int treasureZero = 0;
        1:   29: 	int treasureOne = 0;
        1:   30: 	int treasureTwo = 0;
        1:   31: 	int treasureGreater = 0;
        1:   32: 	int deckCountTest = 1;
        1:   33: 	int deckZero = 0;
        1:   34: 	int deckOne = 0;
        1:   35: 	int deckTwo = 0;
        1:   36: 	int deckGreater = 0;
        1:   37: 	int handZero = 0;
        1:   38: 	int handOne = 0;
        1:   39: 	int handTwo = 0;
        1:   40: 	int handGreater = 0;
        1:   41: 	int handTest = 1;
        1:   42: 	int handFail = 0;
        -:   43:
        1:   44:	printf("Testing adventurer\n");	
        -:   45:
        -:   46:	//Number of Iterations of Test 
     2001:   47:	for(int n = 0; n < 2000; n++){
        -:   48:
        -:   49:		//Get random number of players
     2000:   50:		players = rand() % MAX_PLAYERS + 1;
        -:   51:		//Get randomSeed
     2000:   52:		randomSeed = rand();
        -:   53:
        -:   54:		//Intialize gameState
     2000:   55:		initializeGame(players, kingdomCards, randomSeed, &pre);
        -:   56:		
        -:   57:		//Randomize a sane gameState
        -:   58:		//Choose player for random test
     2000:   59:		p = floor(Random() * players); 
     2000:   60:		pre.whoseTurn = p;
        -:   61:		//Set deckCount within max range (deck must have at least 5 because of random treasures)
     2000:   62:		pre.deckCount[p] = floor(Random() * (MAX_DECK - 5)) + 5;
   497828:   63:		for(int i = 0; i < pre.deckCount[p]; i++){
        -:   64:    		//Fill deck with valid cards that are not treasures
   495828:   65:    		pre.deck[p][i] = floor(Random() * 21) + 7;
        -:   66:    	}
        -:   67:		//Set discardCount within max range
     2000:   68:		pre.discardCount[p] = floor(Random() * MAX_DECK);
   517950:   69:    	for(int i = 0; i < pre.discardCount[p]; i++){
        -:   70:    		//Fill discard with valid cards that are not treasures
   515950:   71:    		pre.discard[p][i] = floor(Random() * 21) + 7;
        -:   72:    	}
        -:   73:		//Set handCount within max range
     2000:   74:		pre.handCount[p] = floor(Random() * MAX_HAND);
   497060:   75:    	for(int i = 0; i < pre.handCount[p]; i++){
        -:   76:    		//Fill hand with valid cards that are not treasures
   495060:   77:    		pre.hand[p][i] = floor(Random() * 21) + 7;
        -:   78:    	}
        -:   79:
        -:   80:
        -:   81:		//Get random number of treasures 
     2000:   82:		treasures = floor(Random() * 5);
        -:   83:		//Set greater than 2 to false
     2000:   84:		int greaterThan2 = 0;
        -:   85:		//Track treausre counts
     2000:   86:		if(treasures == 0){
      399:   87:			++treasureZero;
        -:   88:		}
     1601:   89:		else if(treasures == 1){
      393:   90:			++treasureOne;
        -:   91:		}
     1208:   92:		else if(treasures == 2){
      424:   93:			++treasureTwo;
        -:   94:		}
        -:   95:		else{
      784:   96:			++treasureGreater;
        -:   97:		}
        -:   98:		//Update deck to have random number of treasures
     5990:   99:		for(int i = 0; i < treasures; i++){
        -:  100:			//Add a treasure
     3990:  101:			pre.deck[p][i] = floor(Random() * 3) + 4;
        -:  102:		}
        -:  103:
        -:  104:
        -:  105:		//Testing of Adventurer
        -:  106:
        -:  107:		//Create a copy of pre
        -:  108:		struct gameState post;
     2000:  109:		memcpy(&post, &pre, sizeof(struct gameState));
        -:  110:
        -:  111:		//Call card effect to play adventurer
     2000:  112:		cardEffect(testCard, choice1, choice2, choice3, &post, handpos, &bonus);	
        -:  113:
        -:  114:		//If treasure is greater than 2
     2000:  115:		if (treasures > 2){
        -:  116:			//Then set treasures to 2
      784:  117:			treasures = 2;
        -:  118:			//Set greater than 2 to true
      784:  119:			greaterThan2 = 1;
        -:  120:		}		
        -:  121:
        -:  122:		//Update pre to expected results of playing card adventurer
     4809:  123:		for(int i = 0; i < treasures; i++){
        -:  124:			//Increase handCount
     2809:  125:			pre.handCount[p]++;
        -:  126:			//Move card from deck to hand
     2809:  127:    		pre.hand[p][pre.handCount[p]-1] = pre.deck[p][i];
        -:  128:    		//Decrease deckCount
     2809:  129:    		pre.deckCount[p]--;
        -:  130:		}
        -:  131:
        -:  132:		//Test Treasures added to hand
        -:  133:
        -:  134:		//Check hand count is correct
     2000:  135:		if(pre.handCount[p] != post.handCount[p]){
        -:  136:			//If not, test failed
     1601:  137:			handCountTest = 0;
     1601:  138:			overall = 0;
        -:  139:
        -:  140:			//Mark fail at which treasure count
     1601:  141:			if(treasures == 0){
    #####:  142:				++zero;
        -:  143:			}
     1601:  144:			else if(treasures == 1){
      393:  145:				++one;
        -:  146:			}
     1208:  147:			else if(treasures == 2 && greaterThan2 == 0){
      424:  148:				++two;
        -:  149:			}
        -:  150:			else{
      784:  151:				++greater;
        -:  152:			}
        -:  153:	
        -:  154:		}
        -:  155:
        -:  156:		//Check hand contains correct number of treasure
        -:  157:		//set handFail to false
     2000:  158:		handFail = 0;
        -:  159:		//compare pre and post hands
   499869:  160:		for(int i = 0; i < pre.handCount[p] ; i++){
   497869:  161:			if(pre.hand[p][i] != post.hand[p][i]){
     3003:  162:				overall = 0;
     3003:  163:				handTest = 0;
     3003:  164:				handFail = 1;
        -:  165:			}
        -:  166:		}
        -:  167:		//If failed mark where
     2000:  168:		if(handFail == 1){
     1600:  169:			if(treasures == 0){
        3:  170:				++handZero;
        -:  171:			}
     1597:  172:			else if(treasures == 1){
      389:  173:				++handOne;
        -:  174:			}
     1208:  175:			else if(treasures == 2 && greaterThan2 == 0){
      424:  176:				++handTwo;
        -:  177:			}
        -:  178:			else{
      784:  179:				++handGreater;
        -:  180:			}
        -:  181:		}
        -:  182:
        -:  183:		//Test Treasure subtracted from deck
        -:  184:
        -:  185:		//Check deck count is correct
     2000:  186:		if(pre.deckCount[p] != post.deckCount[p]){		
        -:  187:
        -:  188:			//If not, test failed
     1601:  189:			deckCountTest = 0;
     1601:  190:			overall = 0;
        -:  191:
        -:  192:			//Mark fail at which treasure count
     1601:  193:			if(treasures == 0){
    #####:  194:				++deckZero;
        -:  195:			}
     1601:  196:			else if(treasures == 1){
      393:  197:				++deckOne;
        -:  198:			}
     1208:  199:			else if(treasures == 2 && greaterThan2 == 0){
      424:  200:				++deckTwo;
        -:  201:			}
        -:  202:			else{
      784:  203:				++deckGreater;
        -:  204:			}
        -:  205:		}
        -:  206:
        -:  207:
        -:  208:	}
        -:  209:
        -:  210:	//Results of tests
        -:  211:
        1:  212:	if(overall == 1){
    #####:  213:		printf("Tests for adventurer: ALL PASSED \n");
        -:  214:	}
        -:  215:	else{
        1:  216:		printf("Tests for adventurer: FAILED \n");
        1:  217:		if(handCountTest == 0){
        1:  218:			printf("	Increase Hand Count Correctly Test: FAILED %d/2000 \n", zero + one + two + greater);
        1:  219:			printf("		Test Failed %d/%d times for Zero Tresure in Deck\n", zero, treasureZero);
        1:  220:			printf("		Test Failed %d/%d times for One Tresure in Deck\n", one, treasureOne);
        1:  221:			printf("		Test Failed %d/%d times for Two Tresure in Deck\n", two, treasureTwo);
        1:  222:			printf("		Test Failed %d/%d times for Greater Than 2 Tresure in Deck\n", greater, treasureGreater);
        -:  223:		}
        1:  224:		if(deckCountTest == 0){
        1:  225:			printf("	Decrease Deck Count Correctly Test: FAILED %d/2000 \n", deckZero + deckOne + deckTwo + deckGreater);
        1:  226:			printf("		Test Failed %d/%d times for Zero Tresure in Deck\n", deckZero, treasureZero);
        1:  227:			printf("		Test Failed %d/%d times for One Tresure in Deck\n", deckOne, treasureOne);
        1:  228:			printf("		Test Failed %d/%d times for Two Tresure in Deck\n", deckTwo, treasureTwo);
        1:  229:			printf("		Test Failed %d/%d times for Greater Than 2 Tresure in Deck\n", deckGreater, treasureGreater);
        -:  230:		}
        1:  231:		if(handTest == 0){
        1:  232:			printf("	Hand Contains Correct Cards Test: FAILED %d/2000 \n", handZero + handOne + handTwo + handGreater);
        1:  233:			printf("		Test Failed %d/%d times for Zero Tresure in Deck\n", handZero, treasureZero);
        1:  234:			printf("		Test Failed %d/%d times for One Tresure in Deck\n", handOne, treasureOne);
        1:  235:			printf("		Test Failed %d/%d times for Two Tresure in Deck\n", handTwo, treasureTwo);
        1:  236:			printf("		Test Failed %d/%d times for Greater Than 2 Tresure in Deck\n", handGreater, treasureGreater);
        -:  237:		}
        -:  238:
        -:  239:	}
        -:  240:
        -:  241:
        -:  242:
        -:  243:
        -:  244:
        -:  245:
        -:  246:
        -:  247:
        -:  248:
        -:  249:
        -:  250:
        -:  251:
        1:  252:return 0;
        -:  253:
        -:  254:}
